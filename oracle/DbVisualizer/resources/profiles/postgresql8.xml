<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE DatabaseProfile SYSTEM "dbvis-defs.dtd" [
   <!ENTITY generic-commands SYSTEM "generic-commands.xml">
   <!ENTITY generic-view SYSTEM "generic-view.xml">
   ]>

<!--
   Copyright (c) DbVis Software AB. All Rights Reserved.
-->

<DatabaseProfile
   desc="Profile for PostgreSQL 8+"
   version="$Revision: 14998 $"
   date="$Date: 2012-07-18 10:53:12 +0200 (Wed, 18 Jul 2012) $"
   minver="7.1">

   <!--
    Profile Notes
    =============
      None.

    Change Log
    ==========
      2009-05-27:
        - Fix for PostgreSQL 8.4 (reltriggers renamed to hasreltriggers in pg_class)
      2007-09-11:
        - Now show Columns and Indexes as child objects for Table objects
      2007-05-20:
        - Comment info is now fetched in getSchemas, getTables, getViews, getIndexes
        - Now possible to set comment on Schema, Table, View, Index, Sequence
      2006-09-18:
        - Added "Empty Table" action for table nodes
   -->

   <!-- =================================================================== -->
   <!-- Definition of the commands -->
   <!-- =================================================================== -->

   <Commands>

      &generic-commands;

      <Command id="postgresql.getCatalogs">
         <SQL>
            <![CDATA[
select * from pg_catalog.pg_database
            ]]>
         </SQL>
      </Command>


      <Command id="postgresql.getSchemas">
         <SQL>
            <![CDATA[
SELECT n.nspname                                         AS "Name",
       r.usename                                         AS "Owner",
       pg_catalog.obj_description(n.oid, 'pg_namespace') AS "Comment"
FROM pg_catalog.pg_namespace n
   LEFT JOIN pg_catalog.pg_user r ON n.nspowner= r.usesysid
ORDER BY 1
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getTables">
         <SQL>
            <![CDATA[
SELECT c.relname                                     AS "Name",
       n.nspname                                     AS "Schema",
       pg_get_userbyid(c.relowner)                   AS "Owner",
       t.spcname                                     AS "Tablespace",
       c.relhasindex                                 AS "Has Indexes",
       c.relhasrules                                 AS "Has Rules",
       ]]>
       <If test="(#dm.getDatabaseMajorVersion() gte 8 and
                  #dm.getDatabaseMinorVersion() gte 4) or
                  #dm.getDatabaseMajorVersion() gte 9">
       <![CDATA[
       c.relhastriggers                               AS "Has Triggers",
       ]]>
       </If>
       <Else>
       <![CDATA[
       (c.reltriggers > 0)                            AS "Has Triggers",
       ]]>
       </Else>
       <![CDATA[
       c.relisshared                                 AS "Is Shared",
       c.relnatts                                    AS "N Cols",
       pg_catalog.obj_description(c.oid, 'pg_class') AS "Comment"
FROM   pg_class c
   LEFT JOIN pg_namespace n   ON n.oid = c.relnamespace
   LEFT JOIN pg_tablespace t  ON t.oid = c.reltablespace
WHERE c.relkind = 'r'::"char"
AND   n.nspname LIKE '${schema}'
AND   c.relname LIKE '${table}'
ORDER BY n.nspname, c.relname
            ]]>
         </SQL>
      </Command>

<!--
      <Command id="postgresql.getTable">
         <SQL>
            <![CDATA[
select * from pg_tables where tablename = '${table}'
            ]]>
         </SQL>
      </Command>
-->

      <Command id="postgresql.getViews">
         <SQL>
            <![CDATA[
SELECT c.relname                                      AS "Name",
       n.nspname                                      AS "Schema",
       pg_get_userbyid(c.relowner)                    AS "Owner",
       t.spcname                                      AS "Tablespace",
       c.relhasindex                                  AS "Has Indexes",
       c.relhasrules                                  AS "Has Rules",
       ]]>
       <If test="(#dm.getDatabaseMajorVersion() gte 8 and
                  #dm.getDatabaseMinorVersion() gte 4) or
                  #dm.getDatabaseMajorVersion() gte 9">
       <![CDATA[
       c.relhastriggers                               AS "Has Triggers",
       ]]>
       </If>
       <Else>
       <![CDATA[
       (c.reltriggers > 0)                            AS "Has Triggers",
       ]]>
       </Else>
       <![CDATA[
       c.relisshared                                  AS "Is Shared",
       c.relnatts                                     AS "N Cols",
       pg_catalog.obj_description(c.oid, 'pg_class')  AS "Comment"
FROM   pg_class c
   LEFT JOIN pg_namespace n   ON n.oid = c.relnamespace
   LEFT JOIN pg_tablespace t  ON t.oid = c.reltablespace
WHERE c.relkind = 'v'::"char"
AND   n.nspname LIKE '${schema}'
AND   c.relname LIKE '${table}'
ORDER BY n.nspname, c.relname
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getIndexes">
         <SQL>
            <![CDATA[
SELECT i.relname                                             AS "Index Name",
       n.nspname                                             AS "Schema Name",
       c.relname                                             AS "Table Name",
       t.spcname                                             AS "Tablespace",
       x.indisunique                                         AS "Unique",
       x.indisprimary                                        AS "Primary",
       x.indisclustered                                      AS "Clustered",
       x.indnatts                                            AS "N Cols",
       pg_catalog.obj_description(x.indexrelid, 'pg_class')  AS "Comment"
FROM   pg_index x
   JOIN   pg_class c ON c.oid = x.indrelid
   JOIN   pg_class i ON i.oid = x.indexrelid
   LEFT JOIN pg_namespace n ON n.oid = c.relnamespace
   LEFT JOIN pg_tablespace t ON t.oid = i.reltablespace
WHERE c.relkind = 'r'::"char"
AND   i.relkind = 'i'::"char"
AND i.relname NOT IN
(
    SELECT
        cr.constraint_name
    FROM
        information_schema.table_constraints cr
    WHERE
        n.nspname = cr.table_schema
    AND c.relname = cr.table_name
)
AND   n.nspname LIKE '${schema}'
AND   c.relname LIKE '${table}'
ORDER BY n.nspname, i.relname
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getIndexSource">
         <SQL>
            <![CDATA[
SELECT pg_get_indexdef(i.oid) AS indexdef
FROM   pg_index x JOIN pg_class c ON c.oid = x.indrelid
   JOIN   pg_class i ON i.oid = x.indexrelid
   LEFT JOIN pg_namespace n ON n.oid = c.relnamespace
   LEFT JOIN pg_tablespace t ON t.oid = i.reltablespace
WHERE c.relkind = 'r'::"char" AND i.relkind = 'i'::"char"
AND   i.relname = '${indexname}' AND n.nspname LIKE '${schema}'
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getTriggers">
         <SQL>
            <![CDATA[
SELECT DISTINCT
       trigger_name         AS "Trigger Name",
       trigger_catalog      AS "Trigger Catalog",
       trigger_schema       AS "Trigger Schema",
       action_orientation   AS "Action Orientation",
            ]]>
        <If test="(#dm.getDatabaseMajorVersion() gte 9 and
                   #dm.getDatabaseMinorVersion() gte 1)">
            <![CDATA[
       action_timing        AS "Condition Timing",
            ]]>
       </If>
       <Else>
            <![CDATA[
       condition_timing     AS "Condition Timing",
            ]]>
       </Else>
            <![CDATA[
       event_object_catalog AS "Event Object Catalog",
       event_object_schema  AS "Event Object Schema",
       event_object_table   AS "Event Object Table"
FROM information_schema.triggers 
WHERE trigger_schema LIKE '${schema}'
AND event_object_table LIKE '${tableNamePattern}'
ORDER BY 1
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getTriggerSource">
         <SQL>
            <![CDATA[
SELECT p.prosrc
FROM pg_trigger trg, pg_class tbl, pg_proc p
WHERE trg.tgrelid = tbl.oid
AND trg.tgfoid = p.oid
AND trg.tgname = '${trigname}'
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getFunctions">
         <SQL>
            <![CDATA[
SELECT p.proname AS "Function Name",
       n.nspname AS "Schema Name",
      CASE WHEN p.proretset THEN 'setof ' ELSE '' END ||
      pg_catalog.format_type(p.prorettype, NULL) AS "Result data type",
      pg_catalog.oidvectortypes(p.proargtypes) AS "Argument data types",
      r.usename AS "Owner",
      l.lanname AS "Language",
      pg_catalog.obj_description(p.oid, 'pg_proc') AS "Comment"
FROM pg_catalog.pg_proc p
   LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
   LEFT JOIN pg_catalog.pg_language l ON l.oid = p.prolang
   LEFT JOIN pg_catalog.pg_user r ON r.usesysid = p.proowner
WHERE p.prorettype <> 'pg_catalog.cstring'::pg_catalog.regtype
   AND (p.proargtypes[0] IS NULL
      OR   p.proargtypes[0] <> 'pg_catalog.cstring'::pg_catalog.regtype)
   AND NOT p.proisagg
   AND n.nspname LIKE '${schema}'
ORDER BY 2, 1, 3, 4
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getFunctionSource">
         <SQL>
            <![CDATA[
SELECT p.prosrc as "Source code"
FROM pg_catalog.pg_proc p
   LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE n.nspname = '${schema}'
AND p.proname = '${funcname}';
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getSequences">
         <SQL>
            <![CDATA[
SELECT c.relname                                                           AS "Sequence Name",
       n.nspname                                                           AS "Schema Name",
       c.oid                                                               AS "Rel Id",
       (pg_stat_get_blocks_fetched(c.oid) - pg_stat_get_blocks_hit(c.oid)) AS "Blocks Read",
       pg_stat_get_blocks_hit(c.oid)                                       AS "Blocks Hit",
       pg_catalog.obj_description(c.oid, 'pg_class')                       AS "Comment"
FROM   pg_class c
   LEFT JOIN pg_namespace n ON n.oid = c.relnamespace
WHERE c.relkind = 'S'::"char"
AND n.nspname LIKE '${schema}'
ORDER BY n.nspname, c.relname
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getSequence">
         <SQL>
            <![CDATA[
SELECT sequence_name AS "Sequence Name",
       last_value    AS "Last Value",
       increment_by  AS "Increment By",
       max_value     AS "Max Value",
       min_value     AS "Min Value",
       cache_value   AS "Cache Value",
       log_cnt       AS "Log Cnt",
       is_cycled     AS "Is Cycled",
       is_called     AS "Is Called"
FROM ${schema}.${seqname}
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getDomains">
         <SQL>
            <![CDATA[
SELECT t.typname                                          AS "Domain Name",
       n.nspname                                          AS "Schema Name",
       pg_catalog.format_type(t.typbasetype, t.typtypmod) AS "Type",
       CASE WHEN  t.typdefault IS NOT NULL
          THEN ''||t.typdefault
          ELSE ''
       END                                                AS "Default",
       CASE WHEN t.typnotnull
          THEN 'Yes'
          ELSE 'No'
       END                                                AS "Not null",
       pg_catalog.pg_get_constraintdef(r.oid, true)       AS "Check",
       pg_catalog.obj_description(t.oid, 'pg_type')       AS "Comment"
FROM pg_catalog.pg_type t
   LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace
   LEFT JOIN pg_catalog.pg_constraint r ON t.oid = r.contypid
WHERE t.typtype = 'd' 
AND n.nspname LIKE '${schema}'
ORDER BY 1, 2
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getAggregates">
         <SQL>
            <![CDATA[
SELECT p.proname AS "Aggregate Name", 
   n.nspname as "Schema Name",
   CASE p.proargtypes[0] 
      WHEN 'pg_catalog."any"'::pg_catalog.regtype
      THEN CAST('(all types)' AS pg_catalog.text)
      ELSE pg_catalog.format_type(p.proargtypes[0], NULL)
   END AS "Data Type",
   pg_catalog.obj_description(p.oid, 'pg_proc') AS "Comment"
FROM pg_catalog.pg_proc p
   LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE p.proisagg 
   AND n.nspname LIKE '${schema}'
ORDER BY 1, 2, 3
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getOperators">
         <SQL>
            <![CDATA[
SELECT o.oprname AS "Operator Name",
   n.nspname as "Schema Name",
   CASE WHEN o.oprkind='l' THEN NULL ELSE pg_catalog.format_type(o.oprleft, NULL) END AS "Left arg type",
   CASE WHEN o.oprkind='r' THEN NULL ELSE pg_catalog.format_type(o.oprright, NULL) END AS "Right arg type",
   pg_catalog.format_type(o.oprresult, NULL) AS "Result type",
   coalesce(pg_catalog.obj_description(o.oid, 'pg_operator'),
            pg_catalog.obj_description(o.oprcode, 'pg_proc')) AS "Comment"
FROM pg_catalog.pg_operator o
   LEFT JOIN pg_catalog.pg_namespace n ON n.oid = o.oprnamespace
WHERE n.nspname LIKE '${schema}'
ORDER BY n.nspname, o.oprname, o.oprleft, o.oprright
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getTypes">
         <SQL>
            <![CDATA[
SELECT  pg_catalog.format_type(t.oid, NULL) AS "Type Name",
   n.nspname as "Schema Name",
   pg_catalog.obj_description(t.oid, 'pg_type') as "Comment"
FROM pg_catalog.pg_type t
   LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace
WHERE (t.typrelid = 0 OR (SELECT c.relkind = 'c' FROM pg_catalog.pg_class c WHERE c.oid = t.typrelid)) AND t.typname !~ '^_'
   AND t.typtype != 'd'
   AND n.nspname LIKE '${schema}'
ORDER BY 2, 1
            ]]>
         </SQL>
      </Command>


      <!-- ================================================================= -->
      <!-- DBA related commands requiring certain privileges in the database -->
      <!-- ================================================================= -->

      <Command id="postgresql.getUsers">
         <SQL>
            <![CDATA[
select * from pg_user
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getGroups">
         <SQL>
            <![CDATA[
select * from pg_group
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getSettings">
         <SQL>
            <![CDATA[
select * from pg_settings
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getSessions">
         <SQL>
            <![CDATA[
select * from pg_stat_activity
            ]]>
         </SQL>
      </Command>

      <Command id="postgresql.getLocks">
         <SQL>
            <![CDATA[
select * from pg_locks
            ]]>
         </SQL>
      </Command>

   </Commands>

   <!-- =================================================================== -->
   <!-- Definition of the object actions that are used by the tree and views -->
   <!-- =================================================================== -->

   <ObjectsActionDef>
      <ActionGroup type="Schemas">
         <Action id="postgresql-schemas-create-schema" label="Create Schema" reload="true" icon="add">
            <Input label="Schema" name="newschema" style="text" editable="true"/>
            <Input label="Authorization" name="authorization" style="list">
               <Values>
                  <Command>
                     <SQL><![CDATA[select '' union select usename from pg_user]]></SQL>
                  </Command>
               </Values>
            </Input>

            <SetVar name="_authorization" value='#authorization.equals("") ? "" : " authorization " + #authorization'/>

            <Command>
               <SQL><![CDATA[create schema "${newschema}"${_authorization}]]></SQL>
            </Command>
            <Confirm>
               Create new schema ${schema}?
            </Confirm>
         </Action>
      </ActionGroup>

      <ActionGroup type="Schema">
         <Action id="postgresql-schema-drop" label="Drop Schema" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Cascade" name="cascade" style="check">
               <Values>cascade</Values>
            </Input>
            <Command>
               <SQL><![CDATA[drop schema "${schema}" ${cascade}]]></SQL>
            </Command>
            <Confirm>
               Really drop schema ${schema}?
            </Confirm>
         </Action>
         <Action id="postgresql-schema-comment" label="Comment Schema" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Comment" name="comment" style="text">
               <Default>${postgresql.getSchemas.Comment}</Default>
            </Input>
            <Command>
               <SQL><![CDATA[comment on schema "${schema}" is '${comment}']]></SQL>
            </Command>
            <Confirm>
               Apply new comment on ${schema}?
            </Confirm>
         </Action>
         <Action id="postgresql-schema-export" label="Export Schema"
                 icon="export" reload="false"
                 class="schemaExport"
                 doclink="../exportImport/exportImport.html#mozTocId816546"/>
      </ActionGroup>

      <ActionGroup type="Tables">
         <Action id="postgresql-tables-create-table" label="Create Table"
                 icon="add" reload="true"
                 class="tableCreateOrAlter"
                 classargs="create"
                 doclink="../tableDesigner/tableDesigner.html#mozTocId786186"/>
         <Action id="postgresql-new-table-import-data"
                 label="Import Table Data"
                 icon="import"
                 class="tableDataImport"
                 doclink="../exportImport/exportImport.html#mozTocId708449"/>
      </ActionGroup>

      <ActionGroup type="Table">
         <Action id="postgresql-tables-alter-table" label="Alter Table"
                 icon="edit" reload="true"
                 class="tableCreateOrAlter"
                 classargs="alter"
                 doclink="../tableDesigner/tableDesigner.html#mozTocId740254"/>

         <Action id="postgresql-table-rename" label="Rename Table" reload="true" icon="rename">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="New Table Name" name="newTable" style="text"/>
            <Command>
               <SQL><![CDATA[alter table "${schema}"."${objectname}" rename to "${newTable}"]]></SQL>
            </Command>
            <Confirm>
               Confirm rename of ${schema}.${objectname} to ${newTable}?
            </Confirm>
            <Result>
               Table ${schema}.${objectname} renamed to ${newTable}!
            </Result>
         </Action>

         <Action id="postgresql-table-clear" label="Empty Table" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Use Command" name="useCommand" style="radio">
               <Values>TRUNCATE|DELETE</Values>
               <Default>TRUNCATE</Default>
            </Input>

            <SetVar name="_command" value="#useCommand.equals('TRUNCATE') ? 'truncate table' : 'delete from'"/>

            <Command>
               <SQL><![CDATA[${_command} "${schema}"."${objectname}"]]></SQL>
            </Command>
            <Confirm>
               Really remove all rows in table ${schema}.${objectname}?
            </Confirm>
            <Result>
               All rows in table ${schema}.${objectname} has been removed!
            </Result>
         </Action>

         <Action id="postgresql-table-drop" label="Drop Table" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>            
            <Input label="Drop Dependent Object(s)" name="cascade" style="check"
                   tip="Automatically drop objects that depend on the table (such as views)">
               <Values>cascade</Values>
            </Input>
            <Command><SQL><![CDATA[drop table "${schema}"."${objectname}" ${cascade}]]></SQL></Command>
            <Confirm>
               Really drop table ${schema}.${objectname}?
            </Confirm>
            <Result>
               Table ${schema}.${objectname} has been dropped!
            </Result>
         </Action>

         <Action id="postgresql-table-comment" label="Comment Table" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Comment" name="comment" style="text">
               <Default>${postgresql.getTables.Comment}</Default>
            </Input>
            <Command>
               <SQL><![CDATA[comment on table "${schema}"."${objectname}" is '${comment}']]></SQL>
            </Command>
            <Confirm>
               Apply new comment on ${schema}.${objectname}?
            </Confirm>
         </Action>

         <Action id="postgresql-table-import-data" label="Import Table Data" icon="import"
                 class="tableDataImport"
                 doclink="../exportImport/exportImport.html#mozTocId708449"/>

         <Action id="postgresql-table-export" label="Export Table" icon="export"
                 class="tableExport"
                 doclink="../exportImport/exportImport.html#mozTocId584466"/>            

         <Separator/>

         <Action id="postgresql-table-create-index" label="Create Index" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Index Name" name="indexname" style="text"/>
            <Input label="Unique" name="unique" style="check">
               <Values>unique</Values>
            </Input>

            <Input label="Columns" style="separator"/>

            <Input name="columns" style="grid">
               <Arg name="output" value='"${columnname}"${_sortorder}'/>
               <Arg name="newline" value=", "/>

               <Input name="columnname" label="Column Name" style="list">
                  <Values column="4">
                     <Command idref="getColumnNamesFor">
                        <Input name="table_catalog" value="${catalog}"/>
                        <Input name="table_schema" value="${schema}"/>
                        <Input name="table_name" value="${objectname}"/>
                     </Command>
                  </Values>
                  <Default>${0}</Default>
               </Input>
               <Input name="sortorder" label="Sort Order" style="radio">
                  <Labels>ASC|DESC|Default</Labels>
                  <Values>ASC|DESC|</Values>
                  <Default>ASC</Default>
               </Input>
               <SetVar name="_sortorder" value='#sortorder.equals("") ? "" : " " + #sortorder'/>
            </Input>

            <SetVar name="_unique" value='#unique.equals("") ? "" : " " + #unique'/>
            <SetVar name="_columns" value='#columns.trim().equals("") ? "" : "(" + #columns + ")"'/>
            <SetVar name="_indexname" value='#indexname.trim().equals("") ? "" : " \"" + #indexname + "\""'/>

            <Command>
               <SQL>
                  <![CDATA[create${_unique} index${_indexname} on "${schema}"."${objectname}" ${_columns}]]>
               </SQL>
            </Command>
            <Confirm>
               <![CDATA[Create index "${indexname}"?]]>
            </Confirm>
            <Result>
               <![CDATA[Index "${indexname}" created!]]>
            </Result>
         </Action>

         <Action id="postgresql-tabletrigger-create" label="Create Trigger" icon="add" reload="true"
                 doclink="../procEditor/procEditor.html">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" name="triggerName" style="text"/>
            <Input label="Trigger Time" name="triggerTime" style="radio">
               <Values>BEFORE|AFTER</Values>
               <Default>AFTER</Default>
            </Input>
            <Input label="Trigger Event" name="triggerEvent" style="radio">
               <Values>DELETE|INSERT|UPDATE</Values>
               <Default>INSERT</Default>
            </Input>
            <Input label="Trigger Type" name="triggerType" style="radio">
               <Values>STATEMENT|ROW</Values>
               <Default>STATEMENT</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Source" style="separator"/>
            <Input name="source" style="text-editor">
               <Default><![CDATA[
--
--  Insert your own trigger code here
--
    EXECUTE PROCEDURE "RI_FKey_cascade_del"()]]>
               </Default>
            </Input>

            <Command parsesql="false">
               <SQL><![CDATA[
create trigger "${triggerName}"
  ${triggerTime} ${triggerEvent}
  on "${schema}"."${objectname}"
  for each ${triggerType}
${source}]]>
               </SQL>
            </Command>
            <Result>
               <![CDATA[Trigger <b>${schema}.${triggerName}</b> created.]]>
            </Result>
         </Action>

         <Separator/>

         <Action id="postgresql-table-script" label="Script Table" icon="scriptObject"
                 class="sqlBuilder"
                 classargs="script-dialog,SELECT,SELECT *,INSERT,UPDATE,DELETE,CREATE,DROP"/>

      </ActionGroup>

      <ActionGroup type="Column">
         <Action id="postgresql-column-comment" label="Comment Column" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${theTableName}</Default>
            </Input>
            <Input label="Column" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Comment" name="comment" style="text">
               <Default>${getColumns.REMARKS}</Default>
            </Input>
            <Command>
               <SQL><![CDATA[comment on column "${schema}"."${theTableName}"."${objectname}" is '${comment}']]></SQL>
            </Command>
            <Confirm>
               Apply new comment on ${schema}.${theTableName}.${objectname}?
            </Confirm>
         </Action>
      </ActionGroup>

      <ActionGroup type="View">
         <Action id="postgresql-view-drop" label="Drop View" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="View" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>            
            <Input label="Cascade" name="cascade" style="check">
               <Values>cascade</Values>
            </Input>
            <Command><SQL><![CDATA[drop view "${schema}"."${objectname}" ${cascade}]]></SQL></Command>
            <Confirm>
               Really drop view ${schema}.${objectname}?
            </Confirm>
            <Result>
               View ${schema}.${objectname} has been dropped!
            </Result>
         </Action>

         <Action id="postgresql-view-rename" label="Rename View" reload="true" icon="rename">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="View" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="New View Name" name="newTable" style="text"/>
            <Command>
               <SQL><![CDATA[alter table "${schema}"."${objectname}" rename to "${newTable}"]]></SQL>
            </Command>
            <Confirm>
               Confirm rename of ${schema}.${objectname} to ${newTable}?
            </Confirm>
            <Result>
               View ${schema}.${objectname} renamed to ${newTable}!
            </Result>
         </Action>

         <Action id="postgresql-view-comment" label="Comment View" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="View" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Comment" name="comment" style="text">
               <Default>${postgresql.getViews.Comment}</Default>
            </Input>
            <Command>
               <SQL><![CDATA[comment on view "${schema}"."${objectname}" is '${comment}']]></SQL>
            </Command>
            <Confirm>
               Apply new comment on ${schema}.${objectname}?
            </Confirm>
         </Action>

         <Action id="postgresql-view-export" label="Export View" icon="export"
                 class="viewExport"
                 doclink="../exportImport/exportImport.html#mozTocId584466"/>

         <Separator/>

         <Action id="postgresql-view-script" label="Script View" icon="scriptObject"
                 class="sqlBuilder"
                 classargs="script-dialog,SELECT,SELECT *,INSERT,UPDATE,DELETE,CREATE,DROP"/>

      </ActionGroup>

      <ActionGroup type="Index">
         <Action id="postgresql-index-drop" label="Drop Index" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Index" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Cascade" name="cascade" style="check">
               <Values>cascade</Values>
            </Input>
            <Command><SQL><![CDATA[drop index "${schema}"."${objectname}" ${cascade}]]></SQL></Command>
            <Confirm>
               Really drop index ${schema}.${objectname}?
            </Confirm>
            <Result>
               Index ${schema}.${objectname} dropped!
            </Result>
         </Action>

         <Action id="postgresql-index-rename" label="Rename Index" reload="true" icon="rename">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Index" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="New Index Name" name="newTable" style="text"/>
            <Command>
               <SQL><![CDATA[alter index "${schema}"."${objectname}" rename to "${newTable}"]]></SQL>
            </Command>
            <Confirm>
               Confirm rename of index ${schema}.${objectname} to ${newTable}?
            </Confirm>
            <Result>
               Index ${objectname} renamed to ${newTable}!
            </Result>
         </Action>

         <Action id="postgresql-index-rebuild" label="Rebuild Index">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Index" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL><![CDATA[reindex index "${schema}"."${objectname}"]]></SQL>
            </Command>
            <Confirm>
               Confirm rebuild of index ${schema}.${objectname}?
            </Confirm>
            <Result>
               Index ${schema}.${objectname} rebuilt!
            </Result>
         </Action>

         <Action id="postgresql-index-comment" label="Comment Index" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Index" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Comment" name="comment" style="text">
               <Default>${postgresql.getIndexes.Comment}</Default>
            </Input>
            <Command>
               <SQL><![CDATA[comment on index "${schema}"."${objectname}" is '${comment}']]></SQL>
            </Command>
            <Confirm>
               Apply new comment on ${schema}.${objectname}?
            </Confirm>
         </Action>

         <Separator/>

         <Action id="postgresql-index-script" label="Script Index" icon="scriptObject"
                 class="sqlBuilder"
                 classargs="script-dialog,CREATE,DROP"/>

      </ActionGroup>

      <ActionGroup type="Trigger">
         <Action id="postgresql-trigger-drop" label="Drop Trigger" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop trigger "${objectname}" on "${eventschema}"."${eventtable}"]]></SQL></Command>
            <Confirm>
               Really drop trigger ${objectname}?
            </Confirm>
            <Result>
               Trigger ${objectname} dropped!
            </Result>
         </Action>

         <Action id="postgresql-trigger-rename" label="Rename Trigger" reload="true" icon="rename">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="New Trigger Name" name="newTrigger" style="text"/>
            <Command>
               <SQL><![CDATA[alter trigger "${objectname}" on "${eventschema}"."${eventtable}" rename to "${newTrigger}"]]></SQL>
            </Command>
            <Confirm>
               Confirm rename of trigger ${objectname} to ${newTrigger}?
            </Confirm>
            <Result>
               Trigger ${objectname} renamed to ${newTrigger}!
            </Result>
         </Action>

         <Action id="postgresql-trigger-enable" label="Enable Trigger" icon="enable">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL><![CDATA[alter table "${eventschema}"."${eventtable}" enable trigger "${objectname}"]]></SQL>
            </Command>
            <Confirm>
               Enable trigger ${objectname} ?
            </Confirm>
            <Result>
               Trigger ${objectname} has been enabled!
            </Result>
         </Action>

         <Action id="postgresql-trigger-disable" label="Disable Trigger" icon="disable">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL><![CDATA[alter table "${eventschema}"."${eventtable}" disable trigger "${objectname}"]]></SQL>
            </Command>
            <Confirm>
               Disable trigger ${objectname} ?
            </Confirm>
            <Result>
               Trigger ${objectname} has been disabled!
            </Result>
         </Action>

         <Action id="postgresql-trigger-comment" label="Comment Trigger" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${eventschema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${eventtable}</Default>
            </Input>
            <Input label="Trigger" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Comment" name="comment" style="text">
               <Default>
                  <Command>
                     <SQL><![CDATA[SELECT pg_catalog.obj_description(t.oid, 'pg_trigger')
FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n, pg_catalog.pg_trigger t
WHERE c.relnamespace = n.oid
AND t.tgrelid = c.oid
AND c.relname = '${eventtable}'
AND n.nspname = '${eventschema}'
AND t.tgname = '${objectname}'
]]></SQL>
                  </Command>
               </Default>
            </Input>
            <Command>
               <SQL><![CDATA[comment on trigger "${objectname}" on "${eventschema}"."${eventtable}" is '${comment}']]></SQL>
            </Command>
            <Confirm>
               Apply new comment on ${eventschema}.${eventtable}.${objectname}?
            </Confirm>
         </Action>

         <Action id="postgresql-trigger-export" label="Export Trigger" icon="export"
                 class="triggerExport"
                 doclink="../exportImport/exportImport.html#mozTocId584466"/>
      </ActionGroup>

      <ActionGroup type="Functions">
         <Action id="postgresql-functions-create" label="Create Function" reload="true" icon="add"
                 doclink="../procEditor/procEditor.html">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Function" name="functionName" style="text"/>

            <Input label="Options" style="separator"/>
            <Input label="Return Data Type" name="returns" style="text" editable="false">
               <Default>INTEGER</Default>
            </Input>
<!--            
            <Input label="Language" name="language" style="radio">
               <Values>SQL|C|INTERNAL</Values>
               <Default>SQL</Default>
            </Input>
            <Input label="Volatility" name="volatility" style="radio">
               <Values>VOLATILE|STABLE|IMMUTABLE</Values>
               <Default>VOLATILE</Default>
            </Input>
            <Input label="Returns Set" name="returnsSet" style="check">
               <Values>SETOF </Values>
            </Input>
            <Input label="Strict" name="strict" style="check">
               <Values>STRICT</Values>
            </Input>
            <Input label="Security of Definer" name="security" style="check">
               <Values>SECURITY DEFINER</Values>
            </Input>
-->
            <Input label="Parameters" style="separator"/>

            <Input name="parameters" style="grid">
               <Arg name="output" value="${direction} ${name} ${type}"/>
               <Arg name="newline" value=", "/>

               <Input name="direction" label="Direction" style="list">
                  <Values>IN|INOUT|OUT</Values>
                  <Default>IN</Default>
               </Input>
               <Input name="name" label="Name" style="text">
                  <Default>parm</Default>
               </Input>
               <Input name="type" label="Type" style="text">
                  <Default>INTEGER</Default>
               </Input>
            </Input>

            <SetVar name="_parameters" value='#parameters.trim().equals("") ? "()" : "(" + #parameters + ")"'/>
<!--
            <Input label="Source" style="separator"/>
            <Input name="body" style="text-editor">
               <Default>select $1 + 100</Default>
            </Input>
-->
            <Command parsesql="false">
               <SQL>
                  <![CDATA[
CREATE FUNCTION "${schema}"."${functionName}"
${_parameters}
RETURNS ${returns} AS
'select 100'
LANGUAGE sql]]>
               </SQL>
            </Command>
            <Result>
               <![CDATA[Function "${schema}"."${functionName}" created!]]>
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Function">
         <Action id="postgresql-function-drop" label="Drop Function" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Function" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Cascade" name="cascade" style="check">
               <Values>cascade</Values>
            </Input>
            <Command><SQL><![CDATA[drop function "${schema}"."${objectname}" ( ${postgresql.getFunctions.Argument data types} ) ${cascade}]]></SQL></Command>
            <Confirm>
               Really drop function ${schema}.${objectname}?
            </Confirm>
            <Result>
               Function ${schema}.${objectname} dropped!
            </Result>
         </Action>

         <Action id="postgresql-function-rename" label="Rename Function" reload="true" icon="rename">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Function" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="New Function Name" name="newFunction" style="text"/>
            <Command>
               <SQL><![CDATA[alter function "${schema}"."${objectname}" ( ${postgresql.getFunctions.Argument data types} ) rename to "${newFunction}"]]></SQL>
            </Command>
            <Confirm>
               Confirm rename of function ${objectname} to ${newFunction}?
            </Confirm>
            <Result>
               Function ${objectname} renamed to ${newFunction}!
            </Result>
         </Action>

         <Action id="postgresql-function-comment" label="Comment Function" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Function" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Comment" name="comment" style="text">
               <Default>${postgresql.getFunctions.Comment}</Default>
            </Input>
            <Command>
               <SQL><![CDATA[comment on function "${schema}"."${objectname}" (${postgresql.getFunctions.Argument data types}) is '${comment}']]></SQL>
            </Command>
            <Confirm>
               Apply new comment on ${schema}.${getDDLName}?
            </Confirm>
         </Action>

         <Action id="postgresql-function-export" label="Export Function" icon="export"
                 class="functionExport"
                 doclink="../exportImport/exportImport.html#mozTocId584466"/>

         <Separator/>

         <Action id="postgresql-function-script" label="Script Function" icon="scriptObject"
                 class="sqlBuilder"
                 classargs="script-dialog,CALL,CREATE,DROP"/>

      </ActionGroup>

      <ActionGroup type="Sequences">
         <Action id="postgresql-sequences-create" label="Create Sequence" reload="true" icon="add">
            <Input label="Sequence Owner" name="owner" style="list">
               <Values>
                  <Command>
                     <SQL>
                        <![CDATA[
SELECT trim(n.nspname) FROM pg_catalog.pg_namespace n LEFT JOIN pg_catalog.pg_user r ON n.nspowner=r.usesysid
WHERE n.nspname NOT IN ('pg_catalog', 'information_schema', 'pg_toast') ORDER BY 1;
                        ]]>
                     </SQL>
                  </Command>
               </Values>
               <Default>${schema}</Default>
            </Input>
            <Input label="Sequence Name" name="sequenceName" style="text"/>
            <Input label="Start With" name="startWith" style="text">
               <Default>1</Default>
            </Input>
            <Input label="Increment By" name="increment" style="text">
               <Default>1</Default>
            </Input>
            <Input label="Cached Values" name="cache" style="text">
               <Default>20</Default>
            </Input>
            <Input label="Cycle" name="cycle" style="radio">
               <Labels>Cycle|No Cycle</Labels>
               <Values>cycle|no cycle</Values>
               <Default>no cycle</Default>
            </Input>
            <Command><SQL><![CDATA[create sequence "${owner}"."${sequenceName}" start with ${startWith} increment by ${increment} no maxvalue no minvalue cache ${cache} ${cycle}]]></SQL></Command>
            <Result>
               Sequence ${owner}.${sequenceName} created!
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Sequence">
         <Action id="postgresql-sequence-drop" label="Drop Sequence" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Sequence" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Cascade" name="cascade" style="check">
               <Values>cascade</Values>
            </Input>
            <Command><SQL><![CDATA[drop sequence "${schema}"."${objectname}" ${cascade}]]></SQL></Command>
            <Confirm>
               Really drop sequence ${schema}.${objectname}?
            </Confirm>
            <Result>
               Sequence ${schema}.${objectname} dropped!
            </Result>
         </Action>

         <Action id="postgresql-sequence-comment" label="Comment Sequence" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Sequence" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Comment" name="comment" style="text">
               <Default>${postgresql.getSequences.Comment}</Default>
            </Input>
            <Command>
               <SQL><![CDATA[comment on sequence "${schema}"."${objectname}" is '${comment}']]></SQL>
            </Command>
            <Confirm>
               Apply new comment on ${schema}.${objectname}?
            </Confirm>
         </Action>
      </ActionGroup>

      <ActionGroup type="Domain">
         <Action id="postgresql-domain-drop" label="Drop Domain" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Domain" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Cascade" name="cascade" style="check">
               <Values>cascade</Values>
            </Input>
            <Command><SQL><![CDATA[drop domain "${schema}"."${objectname}" ${cascade}]]></SQL></Command>
            <Confirm>
               Really drop domain ${schema}.${objectname}?
            </Confirm>
            <Result>
               Domain ${schema}.${objectname} dropped!
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Aggregate">
         <Action id="postgresql-aggregate-drop" label="Drop Aggregate" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Aggregate" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>            
            <Input label="Cascade" name="cascade" style="check">
               <Values>cascade</Values>
            </Input>
             <Command><SQL><![CDATA[drop aggregate "${schema}"."${objectname}" ( ${postgresql.getAggregates.Data Type} )  ${cascade}]]></SQL></Command>
            <Confirm>
               Really drop aggregate ${schema}.${objectname}?
            </Confirm>
            <Result>
               Aggregate ${schema}.${objectname} has been dropped!
            </Result>
         </Action>

         <Action id="postgresql-aggregate-rename" label="Rename Aggregate" reload="true" icon="rename">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Aggregate" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="New Aggregate Name" name="newAggregate" style="text"/>
            <Command>
               <SQL><![CDATA[alter aggregate "${schema}"."${objectname}" ( ${postgresql.getAggregates.Data Type} ) rename to "${newAggregate}"]]></SQL>
            </Command>
            <Confirm>
               Confirm rename of ${schema}.${objectname} to ${newAggregate}?
            </Confirm>
            <Result>
               Aggregate ${schema}.${objectname} renamed to ${newAggregate}!
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Type">
         <Action id="postgresql-type-drop" label="Drop Type" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Type" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Cascade" name="cascade" style="check">
               <Values>cascade</Values>
            </Input>
            <Command><SQL><![CDATA[drop type "${schema}"."${objectname}" ${cascade}]]></SQL></Command>
            <Confirm>
               Really drop type ${schema}.${objectname}?
            </Confirm>
            <Result>
               Type ${schema}.${objectname} dropped!
            </Result>
         </Action>

         <Action id="postgresql-type-comment" label="Comment Type" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Type" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Comment" name="comment" style="text">
               <Default>${postgresql.getTypes.Comment}</Default>
            </Input>
            <Command>
               <SQL><![CDATA[comment on type "${schema}"."${objectname}" is '${comment}']]></SQL>
            </Command>
            <Confirm>
               Apply new comment on ${schema}.${objectname}?
            </Confirm>
         </Action>
      </ActionGroup>

   </ObjectsActionDef>

   <!-- =================================================================== -->
   <!-- Definition of the database objects tree structure -->
   <!-- PostgreSQL only allows browsing default database specified in the -->
   <!-- URL. This definition simply makes non default databases  -->
   <!-- e.g catalogs as leaf nodes. -->
   <!-- All nodes below the default database is listed as owner.object -->
   <!-- =================================================================== -->

   <ObjectsTreeDef id="postgresql8">
      <GroupNode type="Databases" label="Databases">
         <DataNode type="Catalog" label="${getCatalogs.TABLE_CAT}" is-empty-output="continue" drop-label-not-equal="${dbvis-defaultCatalogOrSchema}">
            <SetVar name="catalog" value="${getCatalogs.TABLE_CAT}"/>
            <Command idref="getCatalogs">
               <Filter type="Catalog" name="Database">
                  <Column index="TABLE_CAT" name="Name"/>
               </Filter>
            </Command>

            <GroupNode type="Schemas" label="Schemas">
               <DataNode type="Schema" label="${postgresql.getSchemas.Name}" is-empty-output="stop">
                  <SetVar name="schema" value="${postgresql.getSchemas.Name}"/>
                  <Command idref="postgresql.getSchemas">
                     <Filter type="Schema" name="Schema">
                        <Column index="Name" name="Name"/>
                     </Filter>
                  </Command>

                  <GroupNode type="Tables" label="Tables">
                     <DataNode type="Table" label="${getTables.TABLE_NAME}">
                        <SetVar name="objectname" value="${getTables.TABLE_NAME}"/>
                        <SetVar name="rowcount" value="true"/>
                        <SetVar name="acceptInQB" value="true"/>
                        <Command idref="postgresql.getTables">
                           <Input name="schema" value="${schema}"/>
                           <Input name="table" value="%"/>
                           <Output id="getTables.TABLE_SCHEM" index="2"/>
                           <Output id="getTables.TABLE_NAME" index="1"/>
                           <Filter type="Table" name="Table">
                              <Column index="Name" name="Name"/>
                           </Filter>
                        </Command>

                        <!-- Need to keep the objectname for the current table in
                       a new variable so that the viewers will be able to pick up
                       the correct input to display -->
                        <SetVar name="theTableName" value="${objectname}"/>

                        <GroupNode type="Columns" label="Columns">
                           <DataNode type="Column" label="${getColumns.COLUMN_NAME}   (${getColumns.TYPE_NAME})" isLeaf="true">
                              <SetVar name="objectname" value="${getColumns.COLUMN_NAME}"/>
                              <Command idref="getColumns">
                                 <Input name="catalog" value="${catalog}"/>
                                 <Input name="schema" value="${schema}"/>
                                 <Input name="objectname" value="${theTableName}"/>
                              </Command>
                           </DataNode>
                        </GroupNode>

                        <GroupNode type="Indexes" label="Indexes">
                           <DataNode type="Index" label="${postgresql.getIndexes.Index Name}" isLeaf="true">
                              <SetVar name="objectname" value="${postgresql.getIndexes.Index Name}"/>
                              <Command idref="postgresql.getIndexes">
                                 <Input name="schema" value="${schema}"/>
                                 <Input name="table" value="${theTableName}"/>
                              </Command>
                           </DataNode>
                        </GroupNode>

                        <GroupNode type="Triggers" label="Triggers">
                           <DataNode type="Trigger" label="${postgresql.getTriggers.Trigger Name}   (${postgresql.getTriggers.Event Object Schema}.${postgresql.getTriggers.Event Object Table})" isLeaf="true">
                              <SetVar name="objectname" value="${postgresql.getTriggers.Trigger Name}"/>
                              <SetVar name="eventschema" value="${postgresql.getTriggers.Event Object Schema}"/>
                              <SetVar name="eventtable" value="${postgresql.getTriggers.Event Object Table}"/>
                              <SetVar name="getDDLName" value="${postgresql.getTriggers.Event Object Table}/${postgresql.getTriggers.Trigger Name}"/>
                              <Command idref="postgresql.getTriggers">
                                 <Input name="schema" value="${schema}"/>
                                 <Input name="tableNamePattern" value="${theTableName}"/>
                              </Command>
                           </DataNode>
                        </GroupNode>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Views" label="Views">
                     <DataNode type="View" label="${getTables.TABLE_NAME}" isLeaf="true">
                        <SetVar name="objectname" value="${getTables.TABLE_NAME}"/>
                        <SetVar name="rowcount" value="true"/>
                        <SetVar name="acceptInQB" value="true"/>
                        <Command idref="postgresql.getViews">
                           <Input name="schema" value="${schema}"/>
                           <Input name="table" value="%"/>
                           <Output id="getTables.TABLE_SCHEM" index="2"/>
                           <Output id="getTables.TABLE_NAME" index="1"/>
                           <Filter type="View" name="View">
                              <Column index="Name" name="Name"/>
                           </Filter>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <SetVar name="theTableName" value="%"/>

                  <GroupNode type="Indexes" label="Indexes">
                     <DataNode type="Index" label="${postgresql.getIndexes.Index Name}   (${postgresql.getIndexes.Schema Name}.${postgresql.getIndexes.Table Name})" isLeaf="true">
                        <SetVar name="objectname" value="${postgresql.getIndexes.Index Name}"/>
                        <Command idref="postgresql.getIndexes">
                           <Input name="schema" value="${schema}"/>
                           <Input name="table" value="%"/>
                           <Filter type="Index" name="Index">
                              <Column index="Index Name" name="Name"/>
                           </Filter>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <SetVar name="theTableName" value="%"/>

                  <GroupNode type="Triggers" label="Triggers">
                     <DataNode type="Trigger" label="${postgresql.getTriggers.Trigger Name}   (${postgresql.getTriggers.Event Object Schema}.${postgresql.getTriggers.Event Object Table})" isLeaf="true">
                        <SetVar name="objectname" value="${postgresql.getTriggers.Trigger Name}"/>
                        <SetVar name="eventschema" value="${postgresql.getTriggers.Event Object Schema}"/>
                        <SetVar name="eventtable" value="${postgresql.getTriggers.Event Object Table}"/>
                        <SetVar name="getDDLName" value="${postgresql.getTriggers.Event Object Table}/${postgresql.getTriggers.Trigger Name}"/>
                        <Command idref="postgresql.getTriggers">
                           <Input name="schema" value="${schema}"/>
                           <Input name="tableNamePattern" value="${theTableName}"/>
                           <Filter type="Trigger" name="Trigger">
                              <Column index="Trigger Name" name="Name"/>
                           </Filter>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Functions" label="Functions">
                     <DataNode type="Function" label="${postgresql.getFunctions.Function Name} (${postgresql.getFunctions.Argument data types})" isLeaf="true">
                        <SetVar name="objectname" value="${postgresql.getFunctions.Function Name}"/>
                        <SetVar name="getDDLName" value="${postgresql.getFunctions.Function Name} (${postgresql.getFunctions.Argument data types})"/>
                        <Command idref="postgresql.getFunctions">
                           <Input name="schema" value="${schema}"/>
                           <Filter type="Function" name="Function">
                              <Column index="Function Name" name="Name"/>
                           </Filter>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <!--
            <GroupNode type="Procedures" label="Functions">
               <DataNode type="Procedure" label="${getProcedures.PROCEDURE_SCHEM}.${getProcedures.PROCEDURE_NAME}" isLeaf="true">
                  <SetVar name="objectname" value="${getProcedures.PROCEDURE_NAME}"/>
                  <Command idref="getProcedures">
                     <Input name="catalog" value="${catalog}"/>
                     <Input name="schema" value="${schema}"/>
                     <Input name="procedure" value="${procedure}"/>
                     <Filter type="Procedure" name="Procedure">
                        <Column index="PROCEDURE_NAME" name="Name"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>
-->

                  <GroupNode type="Sequences" label="Sequences">
                     <DataNode type="Sequence" label="${postgresql.getSequences.Sequence Name}" isLeaf="true">
                        <SetVar name="schema" value="${postgresql.getSequences.Schema Name}"/>
                        <SetVar name="objectname" value="${postgresql.getSequences.Sequence Name}"/>
                        <Command idref="postgresql.getSequences">
                           <Filter type="Sequence" name="Sequence">
                              <Column index="Sequence Name" name="Name"/>
                           </Filter>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Domains" label="Domains">
                     <DataNode type="Domain" label="${postgresql.getDomains.Domain Name}" isLeaf="true">
                        <SetVar name="objectname" value="${postgresql.getDomains.Domain Name}"/>
                        <Command idref="postgresql.getDomains">
                           <Input name="schema" value="${schema}"/>
                           <Filter type="Domain" name="Domain">
                              <Column index="Domain Name" name="Name"/>
                           </Filter>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Aggregates" label="Aggregates">
                     <DataNode type="Aggregate" label="${postgresql.getAggregates.Aggregate Name}(${postgresql.getAggregates.Data Type})" isLeaf="true">
                        <SetVar name="objectname" value="${postgresql.getAggregates.Aggregate Name}"/>
                        <Command idref="postgresql.getAggregates">
                           <Input name="schema" value="${schema}"/>
                           <Filter type="Aggregate" name="Aggregate">
                              <Column index="Aggregate Name" name="Name"/>
                           </Filter>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Operators" label="Operators">
                     <DataNode type="Operator" label="${postgresql.getOperators.Operator Name} (${postgresql.getOperators.Left arg type},${postgresql.getOperators.Right arg type})" isLeaf="true">
                        <SetVar name="objectname" value="${postgresql.getOperators.Operator Name}"/>
                        <Command idref="postgresql.getOperators">
                           <Input name="schema" value="${schema}"/>
                           <Filter type="Operator" name="Operator">
                              <Column index="Operator Name" name="Name"/>
                           </Filter>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Types" label="Types">
                     <DataNode type="Type" label="${postgresql.getTypes.Type Name}" isLeaf="true">
                        <SetVar name="objectname" value="${postgresql.getTypes.Type Name}"/>
                        <Command idref="postgresql.getTypes">
                           <Input name="schema" value="${schema}"/>
                           <Filter type="Type" name="Type">
                              <Column index="Type Name" name="Name"/>
                           </Filter>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <!-- todo? <GroupNode type="Rules" label="Rules"/> -->

               </DataNode>
            </GroupNode>

         </DataNode>
      </GroupNode>

      <!-- ================================================================= -->
      <!-- DBA Nodes -->
      <!-- ================================================================= -->

      <GroupNode type="DBA" label="DBA Views">
         <GroupNode type="Users" label="Users">
            <DataNode type="User" label="${postgresql.getUsers.usename}" isLeaf="true">
               <SetVar name="objectname" value="${postgresql.getUsers.usename}"/>
               <Command idref="postgresql.getUsers"/>
            </DataNode>
         </GroupNode>
         <GroupNode type="Groups" label="Groups">
            <DataNode type="Group" label="${postgresql.getGroups.groname}" isLeaf="true">
               <SetVar name="objectname" value="${postgresql.getGroups.groname}"/>
               <Command idref="postgresql.getGroups"/>
            </DataNode>
         </GroupNode>
         <GroupNode type="Settings" label="Settings" isLeaf="true"/>
         <GroupNode type="Locks" label="Locks" isLeaf="true"/>
         <GroupNode type="Sessions" label="Sessions" isLeaf="true"/>
      </GroupNode>

   </ObjectsTreeDef>

   <!-- =================================================================== -->
   <!-- Definition of the database objects views -->
   <!-- =================================================================== -->

   <!-- Include the generic-view -->
   &generic-view;

   <ObjectsViewDef id="postgresql8" extends="generic">

      <ObjectView type="Databases">
         <DataView type="Catalog" label="Databases" viewer="grid">
            <Command idref="postgresql.getCatalogs"/>
            <Message>
               <![CDATA[
<html>
List of all available databases in the database server. Only the default
database can be browsed in DbVisualizer. To browse any of the other databases
then supply the name for it in the URL during connect.
</html>
               ]]>
            </Message>
         </DataView>
      </ObjectView>

      <ObjectView type="Schemas">
         <DataView type="Schemas" label="Schemas" viewer="grid">
            <Command idref="postgresql.getSchemas"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Catalog">
         <!-- Drop all views since these are available for type="Tables" -->
         <DataView type="Tables" action="drop"/>
         <DataView type="References" action="drop"/>
      </ObjectView>

      <ObjectView type="Schema">
         <DataView type="Info" label="Info" viewer="node-form"/>
         <!-- Drop all views since these are available for type="Tables" -->
         <DataView type="Tables" action="drop"/>
         <DataView type="References" action="drop"/>
      </ObjectView>

      <ObjectView type="Tables">
         <DataView type="Tables" label="Tables" viewer="grid">
            <Input name="menuItem" value="Script: SELECT ALL">
               <Input name="command" value="select * from ${schema=Schema}${object=Name}"/>
            </Input>
            <Input name="menuItem" value="Script: DROP TABLE">
               <Input name="command" value="drop table ${schema=Schema}${object=Name}"/>
            </Input>

            <Command idref="postgresql.getTables">
               <Input name="schema" value="${schema}"/>
               <Input name="table" value="%"/>
            </Command>
         </DataView>
         <DataView type="References" label="References" viewer="tables-refs"
                 doclink="../databaseExplorer/databaseExplorer.html#mozTocId809328">
            <Command idref="getTables">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="%"/>
               <Input name="tableType" value="SYSTEM TABLE,TABLE"/>
            </Command>
         </DataView>
      </ObjectView>

      <!-- Sub def of the Table type view -->
      <ObjectView type="Table">
         <!-- Replace the Info view -->
         <DataView type="Info" label="Info" viewer="form">
            <Command idref="postgresql.getTables">
               <Input name="schema" value="${schema}"/>
               <Input name="table" value="${objectname}"/>
            </Command>
         </DataView>

         <DataView type="Source" label="DDL" viewer="ddl">
            <Input name="formatSQL" value="true"/>
         </DataView>
            
      </ObjectView>

      <ObjectView type="Views">
         <DataView type="Views" label="Views" viewer="grid">
            <Input name="menuItem" value="Script: SELECT ALL">
               <Input name="command" value="select * from ${schema=Schema}${object=Name}"/>
            </Input>
            <Input name="menuItem" value="Script: DROP VIEW">
               <Input name="command" value="drop view ${schema=Schema}${object=Name}"/>
            </Input>

            <Command idref="postgresql.getViews">
               <Input name="schema" value="${schema}"/>
               <Input name="table" value="%"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="View">
         <DataView type="Info" label="Info" viewer="form">
            <Command idref="postgresql.getViews">
               <Input name="schema" value="${schema}"/>
               <Input name="table" value="${objectname}"/>
            </Command>
         </DataView>
         <DataView type="Columns" label="Columns" viewer="grid">
            <Command idref="getColumns">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${objectname}"/>
            </Command>
         </DataView>
         <DataView type="Data" label="Data" viewer="table-data"/>
         <DataView type="RowCount" label="Row Count" viewer="table-rowcount"/>
         <DataView type="Index" label="Indexes" viewer="grid">
            <Command idref="getIndexes">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${objectname}"/>
            </Command>
         </DataView>
         <DataView type="Source" label="DDL" viewer="ddl">
            <Input name="objectType" value="View"/>
            <Input name="formatSQL" value="true"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Indexes">
         <DataView type="Indexes" label="Indexes" viewer="grid">
            <Command idref="postgresql.getIndexes">
               <Input name="schema" value="${schema}"/>
               <Input name="table" value="${theTableName}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Index">
<!--todo?
         <DataView type="Columns" label="Columns" viewer="grid">
            <Command idref="postgresql.getIndexColumns">
               <Input name="indexname" value="${objectname}"/>
            </Command>
         </DataView>
-->
         <DataView type="Source" label="DDL" viewer="ddl">
            <Input name="objectType" value="Index"/>
            <Input name="formatSQL" value="true"/>
         </DataView>
<!--
         <DataView type="Source" label="Native DDL" viewer="text">
            <Input name="formatSQL" value="true"/>
            <Command idref="postgresql.getIndexSource">
               <Input name="schema" value="${schema}"/>
               <Input name="indexname" value="${objectname}"/>
            </Command>
            <Message>
               <![CDATA[
<html>
This view shows the complete DDL used to create the object.
</html>
              ]]>
            </Message>
         </DataView>
-->
      </ObjectView>

      <ObjectView type="Triggers">
         <DataView type="Triggers" label="Triggers" viewer="grid">
            <Command idref="postgresql.getTriggers">
              <Input name="schema" value="${schema}"/>
              <Input name="tableNamePattern" value="${theTableName}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Trigger">
         <DataView type="SourceEditor" label="Trigger Editor"
                   viewer="ProcedureViewer"
                   classargs="TRIGGER"
                   doclink="../procEditor/procEditor.html">
         </DataView>
         <DataView type="Info" label="Info" viewer="node-form"/>
<!--         
         <DataView type="Source" label="Source" viewer="text">
            <Input name="formatSQL" value="true"/>
            <Command idref="postgresql.getTriggerSource">
               <Input name="trigname" value="${objectname}"/>
            </Command>
         </DataView>
-->         
      </ObjectView>

      <ObjectView type="Sequences">
         <DataView type="Sequences" label="Sequences" viewer="grid">
            <Command idref="postgresql.getSequences"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Sequence">
         <DataView type="Info" label="Info" viewer="form">
            <Command idref="postgresql.getSequence">
               <Input name="schema" value="${schema}"/>
               <Input name="seqname" value="${objectname}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Functions">
         <DataView type="Functions" label="Functions" viewer="grid">
            <Command idref="postgresql.getFunctions">
               <Input name="schema" value="${schema}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Function">
         <DataView type="SourceEditor" label="Function Editor"
                   viewer="ProcedureViewer"
                   classargs="FUNCTION"
                   doclink="../procEditor/procEditor.html">
         </DataView>
         <DataView type="Info" label="Info" viewer="node-form"/>
<!--         
         <DataView type="Source" label="Source" viewer="text">
            <Command idref="postgresql.getFunctionSource">
               <Input name="schema" value="${schema}"/>
               <Input name="funcname" value="${objectname}"/>
            </Command>
         </DataView>
-->         
      </ObjectView>

      <ObjectView type="Domains">
         <DataView type="Domains" label="Domains" viewer="grid">
            <Command idref="postgresql.getDomains">
               <Input name="schema" value="${schema}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Domain">
         <DataView type="Info" label="Info" viewer="node-form"/>
      </ObjectView>

      <ObjectView type="Aggregates">
         <DataView type="Aggregates" label="Aggregates" viewer="grid">
            <Command idref="postgresql.getAggregates">
               <Input name="schema" value="${schema}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Aggregate">
         <DataView type="Info" label="Info" viewer="node-form"/>
      </ObjectView>

      <ObjectView type="Operators">
         <DataView type="Operators" label="Operators" viewer="grid">
            <Command idref="postgresql.getOperators">
               <Input name="schema" value="${schema}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Operator">
         <DataView type="Info" label="Info" viewer="node-form"/>
      </ObjectView>

      <ObjectView type="Types">
         <DataView type="Types" label="Types" viewer="grid">
            <Command idref="postgresql.getTypes">
               <Input name="schema" value="${schema}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Type">
         <DataView type="Info" label="Info" viewer="node-form"/>
      </ObjectView>

      <!-- DBA views -->

      <ObjectView type="Users">
         <DataView type="Users" label="Users" viewer="grid">
            <Command idref="postgresql.getUsers"/>
         </DataView>
      </ObjectView>

      <ObjectView type="User">
         <DataView type="Info" label="Info" viewer="node-form"/>
      </ObjectView>

      <ObjectView type="Groups">
         <DataView type="Groups" label="Groups" viewer="grid">
            <Command idref="postgresql.getGroups"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Group">
         <DataView type="Info" label="Info" viewer="node-form"/>
      </ObjectView>

      <ObjectView type="Settings">
         <DataView type="Settings" label="Settings" viewer="grid">
            <Command idref="postgresql.getSettings"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Sessions">
         <DataView type="Sessions" label="Sessions" viewer="grid">
            <Command idref="postgresql.getSessions"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Locks">
         <DataView type="Locks" label="Locks" viewer="grid">
            <Command idref="postgresql.getLocks"/>
         </DataView>
      </ObjectView>

   </ObjectsViewDef>

</DatabaseProfile>
