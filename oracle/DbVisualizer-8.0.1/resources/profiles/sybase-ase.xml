<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE DatabaseProfile SYSTEM "dbvis-defs.dtd" [
   <!ENTITY generic-commands SYSTEM "generic-commands.xml">
   <!ENTITY generic-view SYSTEM "generic-view.xml">
   ]>

<!--
   Copyright (c) DbVis Software AB. All Rights Reserved.
-->

<DatabaseProfile
   desc="Profile for Sybase ASE"
   version="$Revision: 13243 $"
   date="$Date: 2011-04-14 11:27:45 +0200 (Tor, 14 Apr 2011) $"
   minver="7.1">

   <!--
    Profile Notes
    =============
      None.

    Change Log
    ==========
      2007-09-11:
        - Now show Columns and Indexes as child objects for Table objects
      2006-09-18:
        - Added "Empty Table" action for table nodes
   -->

   <!-- =================================================================== -->
   <!-- Definition of the commands -->
   <!-- =================================================================== -->

   <Commands>

      &generic-commands;

      <!--
        The "getTableNamesFor" command is used by Database getTableNamesFor().
        It must return table names for the catalog and schema named by
        the ${table_catalog} and ${table_catalog} variables in the first
        column.
      -->
      <Command id="sybase-ase.getTableNamesFor">
        <SQL>
          <![CDATA[
SELECT o.name
FROM  dbo.sysobjects o, dbo.sysusers u
WHERE o.uid = u.uid
  AND o.type = 'U'
  AND u.name = '${table_schema}'
ORDER BY o.name
            ]]>
        </SQL>   
      </Command>

      <!--
        The "getColumnNamesFor" command is used by Database getColumnNamesFor().
        It must return column names for the catalog, schema and table named by
        the ${table_catalog}, ${table_catalog} and ${table_name} variables in
        the first column.
      -->
      <Command id="sybase-ase.getColumnNamesFor">
        <SQL>
          <![CDATA[
SELECT c.name
FROM  dbo.sysobjects o, dbo.sysusers u, dbo.syscolumns c
WHERE o.uid = u.uid AND o.id = c.id
  AND o.name = '${table_name}' AND u.name = '${table_schema}'
ORDER BY c.name
            ]]>
        </SQL>   
      </Command>

      <Command id="sybase-ase.getObjects">
         <SQL>
            <![CDATA[
select owner = user_name(uid), name, crdate "Creation Date"
from ${DIB}${database}${DIE}.dbo.sysobjects where type = '${type}' order by owner, name
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getObjectSource">
         <SQL>
            <![CDATA[
select text from ${DIB}${database}${DIE}.dbo.syscomments c, ${DIB}${database}${DIE}.dbo.sysobjects s
where s.id = c.id and s.name = '${name}'
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getTriggers">
         <SQL>
            <![CDATA[
use ${DIB}${database}${DIE}
select 'name' = object_name(o.instrig),
  'insert' 'type', 'owner' = user_name(o.uid), 'table' = object_name(o.id)
from ${DIB}${database}${DIE}.dbo.sysobjects o where o.type = 'U' and object_name(instrig) is not null
  and object_name(o.id) like '${tableNamePattern}'
union
select 'name' = object_name(o.updtrig),
  'update' 'type', 'owner' = user_name(o.uid), 'table' = object_name(o.id)
from ${DIB}${database}${DIE}.dbo.sysobjects o where o.type = 'U' and object_name(updtrig) is not null
  and object_name(o.id) like '${tableNamePattern}'
union
select 'name' = object_name(o.deltrig),
  'delete' 'type', 'owner' = user_name(o.uid), 'table' = object_name(o.id)
from ${DIB}${database}${DIE}.dbo.sysobjects o where o.type = 'U' and object_name(deltrig) is not null
  and object_name(o.id) like '${tableNamePattern}'
order by name
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getTableTriggers">
         <SQL>
            <![CDATA[
use ${DIB}${database}${DIE}
select name = object_name(o.instrig),
  'insert' 'type', 'owner' = user_name(o.uid), 'table' = object_name(o.id), sc.text 'source'
from ${DIB}${database}${DIE}.dbo.sysobjects o, ${DIB}${database}${DIE}.dbo.syscomments sc
where o.instrig = sc.id and o.id = object_id('${name}') and object_name(instrig) is not null
union
select name = object_name(o.updtrig),
  'update' 'type', 'owner' = user_name(o.uid), 'table' = object_name(o.id), sc.text 'source'
from ${DIB}${database}${DIE}.dbo.sysobjects o, ${DIB}${database}${DIE}.dbo.syscomments sc
where o.updtrig = sc.id and o.id = object_id('${name}') and object_name(updtrig) is not null
union
select name = object_name(o.deltrig),
  'delete' 'type', 'owner' = user_name(o.uid), 'table' = object_name(o.id), sc.text 'source'
from ${DIB}${database}${DIE}.dbo.sysobjects o, ${DIB}${database}${DIE}.dbo.syscomments sc
where o.deltrig = sc.id and o.id = object_id('${name}') and object_name(deltrig) is not null
order by name
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getIndexes">
         <SQL>
            <![CDATA[
use ${DIB}${database}${DIE}
SELECT
    name                     AS INDEX_NAME,
    indid                    AS INDEX_ID,
    object_name(id)          AS TABLE_NAME,
    convert(varchar, id)     AS TABLE_ID,
    CONVERT(bit, status & 2) AS IS_UNIQUE
FROM
    dbo.sysindexes
WHERE
    indid != 0
ORDER BY name
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getIndexColumns">
         <SQL>
            <![CDATA[
use ${DIB}${database}${DIE}
SELECT
    name AS INDEX_NAME,
    object_name(${tableId}) AS TABLE_NAME,
    index_col(object_name(${tableId}), ${indexId}, 1) AS COLUMN_NAME,
    1 AS ORDINAL_POSITION,
    ${orderSQL1} AS ASC_OR_DESC
FROM dbo.sysindexes WHERE status2 & 2 != 2
AND index_col(object_name(${tableId}), ${indexId}, 1) IS NOT NULL
AND id = ${tableId} AND indid = ${indexId}
UNION ALL
SELECT
    name AS INDEX_NAME,
    object_name(${tableId}) AS TABLE_NAME,
    index_col(object_name(${tableId}), ${indexId}, 2) AS COLUMN_NAME,
    2 AS ORDINAL_POSITION,
    ${orderSQL2} AS ASC_OR_DESC
FROM dbo.sysindexes WHERE status2 & 2 != 2
AND index_col(object_name(${tableId}), ${indexId}, 2) IS NOT NULL
AND id = ${tableId} AND indid = ${indexId}
UNION ALL
SELECT
    name AS INDEX_NAME,
    object_name(${tableId}) AS TABLE_NAME,
    index_col(object_name(${tableId}), ${indexId}, 3) AS COLUMN_NAME,
    3 AS ORDINAL_POSITION,
    ${orderSQL3} AS ASC_OR_DESC
FROM dbo.sysindexes WHERE status2 & 2 != 2
AND index_col(object_name(${tableId}), ${indexId}, 3) IS NOT NULL
AND id = ${tableId} AND indid = ${indexId}
UNION ALL
SELECT
    name AS INDEX_NAME,
    object_name(${tableId}) AS TABLE_NAME,
    index_col(object_name(${tableId}), ${indexId}, 4) AS COLUMN_NAME,
    4 AS ORDINAL_POSITION,
    ${orderSQL4} AS ASC_OR_DESC
FROM dbo.sysindexes WHERE status2 & 2 != 2
AND index_col(object_name(${tableId}), ${indexId}, 4) IS NOT NULL
AND id = ${tableId} AND indid = ${indexId}
UNION ALL
SELECT
    name AS INDEX_NAME,
    object_name(${tableId}) AS TABLE_NAME,
    index_col(object_name(${tableId}), ${indexId}, 5) AS COLUMN_NAME,
    5 AS ORDINAL_POSITION,
    ${orderSQL5} AS ASC_OR_DESC
FROM dbo.sysindexes WHERE status2 & 2 != 2
AND index_col(object_name(${tableId}), ${indexId}, 5) IS NOT NULL
AND id = ${tableId} AND indid = ${indexId}
UNION ALL
SELECT
    name AS INDEX_NAME,
    object_name(${tableId}) AS TABLE_NAME,
    index_col(object_name(${tableId}), ${indexId}, 6) AS COLUMN_NAME,
    6 AS ORDINAL_POSITION,
    ${orderSQL6} AS ASC_OR_DESC
FROM dbo.sysindexes WHERE status2 & 2 != 2
AND index_col(object_name(${tableId}), ${indexId}, 6) IS NOT NULL
AND id = ${tableId} AND indid = ${indexId}
UNION ALL
SELECT
    name AS INDEX_NAME,
    object_name(${tableId}) AS TABLE_NAME,
    index_col(object_name(${tableId}), ${indexId}, 7) AS COLUMN_NAME,
    7 AS ORDINAL_POSITION,
    ${orderSQL7} AS ASC_OR_DESC
FROM dbo.sysindexes WHERE status2 & 2 != 2
AND index_col(object_name(${tableId}), ${indexId}, 7) IS NOT NULL
AND id = ${tableId} AND indid = ${indexId}
UNION ALL
SELECT
    name AS INDEX_NAME,
    object_name(${tableId}) AS TABLE_NAME,
    index_col(object_name(${tableId}), ${indexId}, 8) AS COLUMN_NAME,
    8 AS ORDINAL_POSITION,
    ${orderSQL8} AS ASC_OR_DESC
FROM dbo.sysindexes WHERE status2 & 2 != 2
AND index_col(object_name(${tableId}), ${indexId}, 8) IS NOT NULL
AND id = ${tableId} AND indid = ${indexId}
UNION ALL
SELECT
    name AS INDEX_NAME,
    object_name(${tableId}) AS TABLE_NAME,
    index_col(object_name(${tableId}), ${indexId}, 9) AS COLUMN_NAME,
    9 AS ORDINAL_POSITION,
    ${orderSQL9} AS ASC_OR_DESC
FROM dbo.sysindexes WHERE status2 & 2 != 2
AND index_col(object_name(${tableId}), ${indexId}, 9) IS NOT NULL
AND id = ${tableId} AND indid = ${indexId}
UNION ALL
SELECT
    name AS INDEX_NAME,
    object_name(${tableId}) AS TABLE_NAME,
    index_col(object_name(${tableId}), ${indexId}, 10) AS COLUMN_NAME,
    10 AS ORDINAL_POSITION,
    ${orderSQL10} AS ASC_OR_DESC
FROM dbo.sysindexes WHERE status2 & 2 != 2
AND index_col(object_name(${tableId}), ${indexId}, 10) IS NOT NULL
AND id = ${tableId} AND indid = ${indexId}
UNION ALL
SELECT
    name AS INDEX_NAME,
    object_name(${tableId}) AS TABLE_NAME,
    index_col(object_name(${tableId}), ${indexId}, 11) AS COLUMN_NAME,
    11 AS ORDINAL_POSITION,
    ${orderSQL11} AS ASC_OR_DESC
FROM dbo.sysindexes WHERE status2 & 2 != 2
AND index_col(object_name(${tableId}), ${indexId}, 11) IS NOT NULL
AND id = ${tableId} AND indid = ${indexId}
UNION ALL
SELECT
    name AS INDEX_NAME,
    object_name(${tableId}) AS TABLE_NAME,
    index_col(object_name(${tableId}), ${indexId}, 12) AS COLUMN_NAME,
    12 AS ORDINAL_POSITION,
    ${orderSQL12} AS ASC_OR_DESC
FROM dbo.sysindexes WHERE status2 & 2 != 2
AND index_col(object_name(${tableId}), ${indexId}, 12) IS NOT NULL
AND id = ${tableId} AND indid = ${indexId}
UNION ALL
SELECT
    name AS INDEX_NAME,
    object_name(${tableId}) AS TABLE_NAME,
    index_col(object_name(${tableId}), ${indexId}, 13) AS COLUMN_NAME,
    13 AS ORDINAL_POSITION,
    ${orderSQL13} AS ASC_OR_DESC
FROM dbo.sysindexes WHERE status2 & 2 != 2
AND index_col(object_name(${tableId}), ${indexId}, 13) IS NOT NULL
AND id = ${tableId} AND indid = ${indexId}
UNION ALL
SELECT
    name AS INDEX_NAME,
    object_name(${tableId}) AS TABLE_NAME,
    index_col(object_name(${tableId}), ${indexId}, 14) AS COLUMN_NAME,
    14 AS ORDINAL_POSITION,
    ${orderSQL14} AS ASC_OR_DESC
FROM dbo.sysindexes WHERE status2 & 2 != 2
AND index_col(object_name(${tableId}), ${indexId}, 14) IS NOT NULL
AND id = ${tableId} AND indid = ${indexId}
UNION ALL
SELECT
    name AS INDEX_NAME,
    object_name(${tableId}) AS TABLE_NAME,
    index_col(object_name(${tableId}), ${indexId}, 15) AS COLUMN_NAME,
    15 AS ORDINAL_POSITION,
    ${orderSQL15} AS ASC_OR_DESC
FROM dbo.sysindexes WHERE status2 & 2 != 2
AND index_col(object_name(${tableId}), ${indexId}, 15) IS NOT NULL
AND id = ${tableId} AND indid = ${indexId}
UNION ALL
SELECT
    name AS INDEX_NAME,
    object_name(${tableId}) AS TABLE_NAME,
    index_col(object_name(${tableId}), ${indexId}, 16) AS COLUMN_NAME,
    16 AS ORDINAL_POSITION,
    ${orderSQL16} AS ASC_OR_DESC
FROM dbo.sysindexes WHERE status2 & 2 != 2
AND index_col(object_name(${tableId}), ${indexId}, 16) IS NOT NULL
AND id = ${tableId} AND indid = ${indexId}
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getUsers">
         <SQL>
            <![CDATA[
SELECT
    d.name "User Name",
    l.name "Login Name",
    d.uid "UID"
FROM
    master.dbo.syslogins l,
    ${DIB}${database}${DIE}.dbo.sysusers d
WHERE
    l.suid     = d.suid
    and d.uid != d.gid
order by 1
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getGroups">
         <SQL>
            <![CDATA[
SELECT
    u.name "Group Name",
    u.gid "GID"
FROM
    ${DIB}${database}${DIE}.dbo.sysusers u,
    ${DIB}${database}${DIE}.dbo.sysusers g
WHERE
    u.gid          = u.uid
    and u.uid     != 1
    and u.gid      = g.uid
    and u.gid      = g.gid
    and u.gid not in
    (
    SELECT
        lrid
    FROM
        ${DIB}${database}${DIE}.dbo.sysroles
    )
ORDER BY
    1
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getGroupUsers">
         <SQL>
            <![CDATA[
SELECT
    grp.name "Group Name",
    usr.name "User Name",
    log.name "Login Name"
FROM
    ${DIB}${database}${DIE}.dbo.sysusers usr,
    ${DIB}${database}${DIE}.dbo.sysusers grp,
    master.dbo.syslogins log
WHERE
    grp.name      = '${group}'
    and usr.gid   = grp.gid
    and usr.uid  != usr.gid
    and log.suid  = usr.suid
UNION
SELECT
    grp.name "Group Name",
    usr.name "User Name",
    '' "Login Name"
FROM
    ${DIB}${database}${DIE}.dbo.sysusers usr,
    ${DIB}${database}${DIE}.dbo.sysusers grp
WHERE
    grp.name      = '${group}'
    and usr.gid   = grp.gid
    and usr.uid  != usr.gid
    and usr.name  = 'guest'
    and usr.suid  = -1
ORDER BY
    1
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getUserTypes">
         <SQL>
            <![CDATA[
select t.name 'Data Type', p.name 'System Type', b.name 'Creator',
t.allownulls 'Allow Nulls', t.length 'Length', t.prec 'Precision', t.scale 'Scale'
from ${DIB}${database}${DIE}.dbo.systypes t, ${DIB}${database}${DIE}.dbo.sysusers b, ${DIB}${database}${DIE}.dbo.systypes p
where t.uid = b.uid and t.usertype >= 100 and t.type = p.type and p.usertype =
(select min(usertype) from ${DIB}${database}${DIE}.dbo.systypes where type = t.type) order by 1
            ]]>
         </SQL>
      </Command>

      <!-- ================================================================= -->
      <!-- DBA related commands requiring certain privileges in the database -->
      <!-- ================================================================= -->

      <Command id="sybase-ase.getLogins">
         <SQL>
            <![CDATA[
select name "Name", suid "SUID", dbname "Default Database", fullname "Full Name",
language "Default Language", totcpu "CPU Time", totio "I/O Time", pwdate "Password Set"
from master.dbo.syslogins order by 1
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getLoginDatabases">
         <SQL>
            <![CDATA[
select a.name "Name", sum(c.size / 512) "Size (MB)"
from master.dbo.sysdatabases a, master.dbo.syslogins b, master.dbo.sysusages c
where (a.suid = b.suid) and (b.suid = ${suid}) and a.dbid = c.dbid group by a.name
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getLoginRoles">
         <SQL>
            <![CDATA[
select role_name(lr.srid) "Name", lr.status "Status"
from master.dbo.sysloginroles lr, master.dbo.syslogins l
where lr.suid = l.suid and l.name = '${login}' and lr.status = 1
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getServerRoles">
         <SQL>
            <![CDATA[
select * from master.dbo.syssrvroles
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getRoleLogins">
         <SQL>
            <![CDATA[
select l.name "Name", lr.status "Status"
from master.dbo.syslogins l, master.dbo.sysloginroles lr
where lr.srid = role_id('${name}') and l.suid = lr.suid and lr.status = 1
order by l.name
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getDevices">
         <SQL>
            <![CDATA[
select a.name "Name", a.phyname "Pysical Name",
(a.high - a.low + 1) / 512 "Size (MB)",
(select (a.high - a.low + 1) / 512 - (sum(size / 512) * (2048 / 2048))
from master.dbo.sysusages
where (vstart <= a.high) and (vstart >= a.low)) "Free (MB)"
from master.dbo.sysdevices a where (a.cntrltype = 0) group by a.name
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getDeviceDatabases">
         <SQL>
            <![CDATA[
select a.name "Name", sum(b.size) / 512 "Size (MB)",
  (select l.name from master.dbo.syslogins l where l.suid = a.suid) "Creator"
from master.dbo.sysdatabases a, master.dbo.sysusages b, master.dbo.sysdevices c
where (a.dbid = b.dbid) and (b.vstart <= c.high) and
(b.vstart >= c.low) and (c.name = '${name}') group by a.name
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.serverInfo">
         <SQL>
            <![CDATA[
exec sp_server_info
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getRemoteServers">
         <SQL>
            <![CDATA[
select s.srvid, s.srvname, s.srvnetname, s.srvclass, v.name
from master.dbo.sysservers s, master.dbo.spt_values v
where s.srvclass = v.number and v.type = 'X' and v.name not in ('access_server', 'sds')
order by s.srvname
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getCaches">
         <SQL>
            <![CDATA[
select a.name, a.status, a.value, (select b.value from master.dbo.syscurconfigs b
where b.config = a.config and b.comment = a.name)
from master.dbo.sysconfigures a where parent = 19 and config = parent order by 2
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getProcesses">
         <SQL>
            <![CDATA[
select p.spid, p.program_name, p.cmd, l.name, p.status, p.suid
from master.dbo.sysprocesses p, master.dbo.syslogins l
where p.suid *= l.suid order by 1
 ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getCharSet">
         <SQL>
            <![CDATA[
select name, description from master.dbo.syscharsets
where id = (select value from master.dbo.syscurconfigs where config = 131) ;
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getTransactions">
         <SQL>
            <![CDATA[
select type = convert(char(11),v3.name), coordinator = convert(char(10), v4.name),
starttime=convert(char(20), starttime), state = convert(char(17),v1.name),
connection = convert(char(9), v2.name), dbid=masterdbid, spid, loid, namelen, xactname
from master.dbo.systransactions ts, master.dbo.spt_values v1,
master.dbo.spt_values v2, master.dbo.spt_values v3, master.dbo.spt_values v4
where ts.state = v1.number and v1.type = 'T1' and ts.connection = v2.number and
v2.type = 'T2' and ts.type = v3.number and v3.type = 'T3'
and ts.coordinator = v4.number and v4.type = 'T4'
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getLocks">
         <SQL>
            <![CDATA[
select fid, spid, loid, locktype = v1.name, table_id = id, page, row,
dbname = db_name(dbid), class, context = v2.name
from master.dbo.syslocks l, master.dbo.spt_values v1, master.dbo.spt_values v2
where l.type = v1.number and v1.type = 'L' and (l.context + 2049) = v2.number and v2.type = 'L2'
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getDependencies">
         <SQL>
            <![CDATA[
exec sp_depends ${name}
            ]]>
         </SQL>
      </Command>

      <Command id="sybase-ase.getFunctionColumns">
         <SQL>
            <![CDATA[
SELECT
    '${catalog}' AS FUNCTION_CAT,
    '${schema}' AS FUNCTION_SCHEM,
    '${function}' AS FUNCTION_NAME,
    c.name AS COLUMN_NAME,
    CASE
        WHEN c.name = 'Return Type' THEN 5
        ELSE 1
    END AS COLUMN_TYPE,
    CASE
        WHEN t.name = 'bigint' THEN -5
        WHEN t.name = 'binary' THEN -2
        WHEN t.name = 'bit' THEN -7
        WHEN t.name = 'char' THEN 1
        WHEN t.name = 'date' THEN 91
        WHEN t.name = 'datetime' THEN 93
        WHEN t.name = 'decimal' THEN 3
        WHEN t.name = 'double precision' THEN 8
        WHEN t.name = 'float' THEN 8
        WHEN t.name = 'image' THEN -4
        WHEN t.name = 'int' THEN 4
        WHEN t.name = 'money' THEN 3
        WHEN t.name = 'nchar' THEN 1
        WHEN t.name = 'numeric' THEN 2
        WHEN t.name = 'nvarchar' THEN 1
        WHEN t.name = 'real' THEN 7
        WHEN t.name = 'smalldatetime' THEN 93
        WHEN t.name = 'smallint' THEN 5
        WHEN t.name = 'smallmoney' THEN 3
        WHEN t.name = 'text' THEN -1
        WHEN t.name = 'time' THEN 92
        WHEN t.name = 'tinyint' THEN -6
        WHEN t.name = 'unitext' THEN -1
        WHEN t.name = 'unsigned bigint' THEN -5
        WHEN t.name = 'unsigned int' THEN 4
        WHEN t.name = 'unsigned smallint' THEN 5
        WHEN t.name = 'varbinary' THEN -3
        WHEN t.name = 'varchar' THEN 12
        ELSE 1111
    END AS DATA_TYPE,
    t.name AS TYPE_NAME,
    c.prec AS PRECISION,
    c.length AS LENGTH,
    c.scale AS SCALE,
    convert(bit, c.status & 8) AS NULLABLE
FROM
    dbo.sysobjects o,
    dbo.syscolumns c,
    dbo.systypes t
WHERE
    (
        o.id = c.id
    AND c.type = t.type
    AND c.usertype = t.usertype
    )
AND o.type = 'SF'
AND o.id = object_id('${qname}')
ORDER BY
    c.colid ASC
            ]]>
         </SQL>
      </Command>

   </Commands>

   <!-- =================================================================== -->
   <!-- Definition of the object actions that are used by the tree and views -->
   <!-- =================================================================== -->

   <ObjectsActionDef>
       <ActionGroup type="Catalog">
         <Action id="sybase-schema-export" label="Export Database"
                 icon="export" reload="false"
                 class="schemaExport"
                 doclink="../exportImport/exportImport.html#mozTocId816546"/>
       </ActionGroup>

       <ActionGroup type="Tables">
         <Action id="sybase-ase-tables-create-table" label="Create Table"
                 icon="add" reload="true"
                 class="tableCreateOrAlter"
                 classargs="create"
                 doclink="../tableDesigner/tableDesigner.html#mozTocId786186"/>
         <Action id="sybase-new-table-import-data"
                 label="Import Table Data"
                 icon="import"
                 class="tableDataImport"
                 doclink="../exportImport/exportImport.html#mozTocId708449"/>
      </ActionGroup>

      <ActionGroup type="Table">
         <Action id="sybase-ase-tables-alter-table" label="Alter Table"
                 icon="edit" reload="true"
                 class="tableCreateOrAlter"
                 classargs="alter"
                 doclink="../tableDesigner/tableDesigner.html#mozTocId740254"/>

         <Action id="sybase-table-rename" label="Rename Table" reload="true" icon="rename">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="New Table Name" name="newTable" style="text"/>
            <Command>
               <SQL><![CDATA[exec sp_rename ${objectname}, ${newTable}]]></SQL>
            </Command>
            <Confirm>
               Confirm rename of ${schema}.${objectname} to ${newTable}?
            </Confirm>
            <Result>
               Table ${schema}.${objectname} renamed to ${newTable}!
            </Result>
         </Action>

         <Action id="sybase-table-clear" label="Empty Table" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Use Command" name="useCommand" style="radio">
               <Values>TRUNCATE|DELETE</Values>
               <Default>TRUNCATE</Default>
            </Input>

            <SetVar name="_command" value="#useCommand.equals('TRUNCATE') ? 'truncate table' : 'delete from'"/>

            <Command>
               <SQL><![CDATA[${_command} ${DIB}${schema}${DIE}.${DIB}${objectname}${DIE} ]]></SQL>
            </Command>
            <Confirm>
               Really remove all rows in table ${schema}.${objectname}?
            </Confirm>
            <Result>
               All rows in table ${schema}.${objectname} has been removed!
            </Result>
         </Action>

         <Action id="sybase-table-drop" label="Drop Table" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop table ${DIB}${schema}${DIE}.${DIB}${objectname}${DIE} ]]></SQL></Command>
            <Confirm>
               Really drop table ${schema}.${objectname}?
            </Confirm>
            <Result>
               Table ${schema}.${objectname} has been dropped!
            </Result>
         </Action>

         <Action id="sybase-ase-table-import-data" label="Import Table Data" icon="import"
                 class="tableDataImport"
                 doclink="../exportImport/exportImport.html#mozTocId708449"/>

         <Action id="sybase-table-export" label="Export Table" icon="export"
                 class="tableExport"
                 doclink="../exportImport/exportImport.html#mozTocId584466"/>            

         <Separator/>
      
         <Action id="sybase-ase-table-create-index" label="Create Index" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Index Name" name="indexname" style="text"/>
            <Input label="Unique" name="unique" style="check">
               <Values>unique</Values>
            </Input>

            <Input label="Columns" style="separator"/>

            <Input name="columns" style="grid">
               <Arg name="output" value='"${columnname}"${_sortorder}'/>
               <Arg name="newline" value=", "/>

               <Input name="columnname" label="Column Name" style="list">
                  <Values column="4">
                     <Command idref="getColumnNamesFor">
                        <Input name="table_catalog" value="${catalog}"/>
                        <Input name="table_schema" value="${schema}"/>
                        <Input name="table_name" value="${objectname}"/>
                     </Command>
                  </Values>
                  <Default>${0}</Default>
               </Input>
               <Input name="sortorder" label="Sort Order" style="radio">
                  <Labels>ASC|DESC|Default</Labels>
                  <Values>ASC|DESC|</Values>
                  <Default>ASC</Default>
               </Input>
               <SetVar name="_sortorder" value='#sortorder.equals("") ? "" : " " + #sortorder'/>
            </Input>

            <SetVar name="_unique" value='#unique.equals("") ? "" : " " + #unique'/>
            <SetVar name="_columns" value='#columns.trim().equals("") ? "" : "(" + #columns + ")"'/>
            <SetVar name="_indexname" value='#indexname.trim().equals("") ? "" : " " + #indexname'/>

            <Command>
               <SQL>
                  <![CDATA[create${_unique} index${_indexname} on ${DIB}${schema}${DIE}.${DIB}${objectname}${DIE} ${_columns}]]>
               </SQL>
            </Command>
            <Confirm>
               <![CDATA[Create index "${indexname}"?]]>
            </Confirm>
            <Result>
               <![CDATA[Index "${indexname}" created!]]>
            </Result>
         </Action>

         <Action id="sqlserver-tabletrigger-create" label="Create Trigger" icon="add" reload="true"
                 doclink="../procEditor/procEditor.html">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" name="triggerName" style="text"/>
            <Input label="Trigger Event" name="triggerEvent" style="radio">
               <Values>DELETE|INSERT|UPDATE</Values>
               <Default>INSERT</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Source" style="separator"/>
            <Input name="source" style="text-editor">
               <Default><![CDATA[
--
--  Insert your own trigger code here
--
    insert into anotherTable (col1, col2) values(val1, val2)]]>
               </Default>
            </Input>

            <Command parsesql="false">
               <SQL><![CDATA[
create trigger ${DIB}${schema}${DIE}.${triggerName}
  on ${DIB}${schema}${DIE}.${DIB}${objectname}${DIE}
  for ${triggerEvent}
  as 
${source}]]>
               </SQL>
            </Command>
            <Result>
               <![CDATA[Trigger <b>${schema}.${triggerName}</b> created.]]>
            </Result>
         </Action>

         <Separator/>

         <ActionGroup label="Script Object to SQL Editor">
            <Action id="sybase-ase-table-script-select" label="SELECT" icon="selectFrom"
                    class="sqlBuilder"
                    classargs="select"/>
            <Action id="sybase-ase-table-script-insert" label="INSERT" icon="insertRow"
                    class="sqlBuilder"
                    classargs="insert"/>
            <Action id="sybase-ase-table-script-update" label="UPDATE" icon="updateRow"
                    class="sqlBuilder"
                    classargs="update"/>
            <Action id="sybase-ase-table-script-delete" label="DELETE" icon="deleteWhere"
                    class="sqlBuilder"
                    classargs="delete"/>

            <Separator/>

            <Action id="sybase-ase-table-script-create" label="CREATE TABLE" icon="createTable"
                    class="ddlGenerator"
                    classargs="createTable"/>
         </ActionGroup>

         <ActionGroup label="Script Object to New SQL Editor">
            <Action id="sybase-ase-table-script-select-new" label="SELECT" icon="selectFrom"
                    class="sqlBuilder"
                    classargs="select,newEditor"/>
            <Action id="sybase-ase-table-script-insert-new" label="INSERT" icon="insertRow"
                    class="sqlBuilder"
                    classargs="insert,newEditor"/>
            <Action id="sybase-ase-table-script-update-new" label="UPDATE" icon="updateRow"
                    class="sqlBuilder"
                    classargs="update,newEditor"/>
            <Action id="sybase-ase-table-script-delete-new" label="DELETE" icon="deleteWhere"
                    class="sqlBuilder"
                    classargs="delete,newEditor"/>

            <Separator/>

            <Action id="sybase-ase-table-script-create-new" label="CREATE TABLE" icon="createTable"
                    class="ddlGenerator"
                    classargs="createTable,newEditor"/>
         </ActionGroup>
      </ActionGroup>

      <ActionGroup type="Index">
         <Action id="sybase-ase-index-drop" label="Drop Index" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${getIndexes.TABLE_NAME}</Default>
            </Input>
            <Input label="Index" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop index ${getIndexes.TABLE_NAME}.${objectname}]]></SQL></Command>
            <Confirm>
               Really drop index ${objectname} for table ${getIndexes.TABLE_NAME}?
            </Confirm>
            <Result>
               Index ${getIndexes.TABLE_NAME}.${objectname} dropped!
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="SystemTable">
         <ActionGroup label="Script Object to SQL Editor">
            <Action id="sybase-ase-systemtable-script-select" label="SELECT" icon="selectFrom"
                    class="sqlBuilder"
                    classargs="select"/>
         </ActionGroup>

         <ActionGroup label="Script Object to New SQL Editor">
            <Action id="sybase-ase-systemtable-script-select-new" label="SELECT" icon="selectFrom"
                    class="sqlBuilder"
                    classargs="select,newEditor"/>
         </ActionGroup>
      </ActionGroup>

      <ActionGroup type="View">
         <Action id="sybase-view-drop" label="Drop View" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="View" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop view ${DIB}${schema}${DIE}.${DIB}${objectname}${DIE} ]]></SQL></Command>
            <Confirm>
               Really drop view ${schema}.${objectname}?
            </Confirm>
            <Result>
               View ${schema}.${objectname} has been dropped!
            </Result>
         </Action>

         <Action id="sybase-ase-view-export" label="Export View" icon="export"
                 class="viewExport"
                 doclink="../exportImport/exportImport.html#mozTocId584466"/>

         <Separator/>

         <ActionGroup label="Script Object to SQL Editor">
            <Action id="sybase-ase-view-script-select" label="SELECT" icon="selectFrom"
                    class="sqlBuilder"
                    classargs="select"/>
            <Action id="sybase-ase-view-script-insert" label="INSERT" icon="insertRow"
                    class="sqlBuilder"
                    classargs="insert"/>
            <Action id="sybase-ase-view-script-update" label="UPDATE" icon="updateRow"
                    class="sqlBuilder"
                    classargs="update"/>
            <Action id="sybase-ase-view-script-delete" label="DELETE" icon="deleteWhere"
                    class="sqlBuilder"
                    classargs="delete"/>

            <Separator/>

            <Action id="sybase-ase-view-script-create" label="CREATE VIEW" icon="createTable"
                    class="ddlGenerator"
                    classargs="createView"/>
         </ActionGroup>

         <ActionGroup label="Script Object to New SQL Editor">
            <Action id="sybase-ase-view-script-select-new" label="SELECT" icon="selectFrom"
                    class="sqlBuilder"
                    classargs="select,newEditor"/>
            <Action id="sybase-ase-view-script-insert-new" label="INSERT" icon="insertRow"
                    class="sqlBuilder"
                    classargs="insert,newEditor"/>
            <Action id="sybase-ase-view-script-update-new" label="UPDATE" icon="updateRow"
                    class="sqlBuilder"
                    classargs="update,newEditor"/>
            <Action id="sybase-ase-view-script-delete-new" label="DELETE" icon="deleteWhere"
                    class="sqlBuilder"
                    classargs="delete,newEditor"/>

            <Separator/>

            <Action id="sybase-view-script-create-new" label="CREATE VIEW" icon="createTable"
                    class="ddlGenerator"
                    classargs="createView,newEditor"/>
         </ActionGroup>
      </ActionGroup>

      <ActionGroup type="Users">
        <Action id="sybase-users-add" label="Add User" reload="true" icon="add">
            <Input label="Login Name" name="loginName" style="list">
               <Values>
                  <Command>
                    <SQL><![CDATA[select name from master.dbo.syslogins order by 1]]></SQL>
                  </Command>
               </Values>
            </Input>
            <Command>
               <SQL><![CDATA[exec sp_adduser ${loginName}]]></SQL>
            </Command>
            <Result>
               User ${userid} created!
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="User">
         <Action id="sybase-user-drop" label="Drop User" reload="true" icon="remove">
            <Input label="User Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[exec sp_dropuser ${objectname}]]></SQL></Command>
            <Confirm><![CDATA[
            Really drop user ${objectname}?
            ]]></Confirm>
            <Result>
               User ${objectname} dropped!
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Groups">
        <Action id="sybase-groups-add" label="Add Group" reload="true" icon="add">
            <Input label="Group Name" name="groupName" style="text"/>
            <Command>
               <SQL><![CDATA[exec sp_addgroup ${groupName}]]></SQL>
            </Command>
            <Result>
               Group ${userid} added!
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Group">
         <Action id="sybase-group-drop" label="Drop Group" reload="true" icon="remove">
            <Input label="Group Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[exec sp_dropgroup ${objectname} ]]></SQL></Command>
            <Confirm><![CDATA[
            Really drop group ${objectname}?
            ]]></Confirm>
            <Result>
               Group ${objectname} dropped!
            </Result>
         </Action>
      </ActionGroup>
      
      <ActionGroup type="Trigger">
         <Action id="sybase-trigger-drop" label="Drop Trigger" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop trigger ${DIB}${schema}${DIE}.${DIB}${objectname}${DIE} ]]></SQL></Command>
            <Confirm>
               Really drop trigger ${schema}.${objectname}?
            </Confirm>
            <Result>
               Trigger ${schema}.${objectname} dropped!
            </Result>
         </Action>

         <Action id="sybase-trigger-enable" label="Enable Trigger" icon="enable">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL><![CDATA[
alter table ${DIB}${schema}${DIE}.${DIB}${sybase-ase.getTriggers.table}${DIE}
enable trigger ${DIB}${objectname}${DIE} ]]></SQL>
            </Command>
            <Confirm>
               Enable trigger ${schema}.${objectname} ?
            </Confirm>
            <Result>
               Trigger ${schema}.${objectname} has been enabled!
            </Result>
         </Action>

         <Action id="sybase-trigger-disable" label="Disable Trigger" icon="disable">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL><![CDATA[
alter table ${DIB}${schema}${DIE}.${DIB}${sybase-ase.getTriggers.table}${DIE}
disable trigger ${DIB}${objectname}${DIE} ]]></SQL>
            </Command>
            <Confirm>
               Disable trigger ${schema}.${objectname} ?
            </Confirm>
            <Result>
               Trigger ${schema}.${objectname} has been disabled!
            </Result>
         </Action>

         <Action id="sybase-ase-trigger-export" label="Export Trigger" icon="export"
                 class="triggerExport"
                 doclink="../exportImport/exportImport.html#mozTocId584466"/>
       </ActionGroup>

      <ActionGroup type="Procedures">
         <Action id="sybase-procedures-create" label="Create Procedure" reload="true" icon="add"
                 doclink="../procEditor/procEditor.html">
            <Input label="Procedure Name" name="procedureName" style="text"/>
            <Input name="mode" label="Transaction Mode" style="radio">
                  <Values>anymode|chained|unchained</Values>
                  <Default>anymode</Default>
               </Input>

            <Input label="Parameters" style="separator"/>

            <Input name="parameters" style="grid">
               <Arg name="output" value="${name} ${type} ${direction}"/>
               <Arg name="newline" value=", "/>

               <Input name="name" label="Name" style="text">
                  <Default>@parm</Default>
               </Input>
               <Input name="direction" label="Direction" style="list">
                  <Values>|OUTPUT</Values>
                  <Default></Default>
               </Input>
               <Input name="type" label="Type" style="text">
                  <Default>VARCHAR(20)</Default>
               </Input>
            </Input>

            <SetVar name="_parameters" value='#parameters.trim().equals("") ? "" : #parameters'/>
            <Command parsesql="true">
               <SQL>
                  <![CDATA[
CREATE PROCEDURE ${procedureName}
${_parameters}
AS
  print 'Hello World';
EXEC sp_procxmode ${procedureName}, ${mode}
                  ]]>
               </SQL>
            </Command>
            <Confirm>
               Create procedure ${procedureName}?
            </Confirm>
            <Result>
               Procedure ${procedureName} created!
            </Result>
         </Action>
      </ActionGroup>
       
      <ActionGroup type="Procedure">
         <Action id="sybase-procedure-drop" label="Drop Procedure" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Procedure" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop procedure ${DIB}${schema}${DIE}.${DIB}${objectname}${DIE} ]]></SQL></Command>
            <Confirm>
               Really drop procedure ${schema}.${objectname}?
            </Confirm>
            <Result>
               Procedure ${schema}.${objectname} dropped!
            </Result>
         </Action>

         <Action id="sybase-ase-procedure-export" label="Export Procedure" icon="export"
                 class="procedureExport"
                 doclink="../exportImport/exportImport.html#mozTocId584466"/>

         <Separator/>

         <ActionGroup label="Script Object to SQL Editor">
            <Action id="sybase-procedure-call" label="CALL" icon="execute"
                    class="sqlBuilder"
                    classargs="call,procedure"/>
         </ActionGroup>

         <ActionGroup label="Script Object to New SQL Editor">
            <Action id="sybase-procedure-call-new" label="CALL" icon="execute"
                    class="sqlBuilder"
                    classargs="call,procedure,newEditor"/>
         </ActionGroup>
       </ActionGroup>

      <ActionGroup type="Functions">
         <Action id="sybase-functions-create" label="Create Function" reload="true" icon="add"
                 doclink="../procEditor/procEditor.html">
            <Input label="Function Name" name="functionName" style="text"/>
            <Input label="Return Data Type" name="returns" style="text">
               <Default>VARCHAR(20)</Default>
            </Input>

            <Input label="Parameters" style="separator"/>

            <Input name="parameters" style="grid">
               <Arg name="output" value="${name} ${type}"/>
               <Arg name="newline" value=", "/>

               <Input name="name" label="Name" style="text">
                  <Default>@parm</Default>
               </Input>
               <Input name="type" label="Type" style="text">
                  <Default>VARCHAR(20)</Default>
               </Input>
            </Input>

            <SetVar name="_parameters" value='#parameters.trim().equals("()") ? "" : "(" + #parameters + ")"'/>
            <Command parsesql="true">
               <SQL>
                  <![CDATA[
CREATE FUNCTION ${functionName}
${_parameters}
RETURNS ${returns}
AS
  RETURN NULL
                  ]]>
               </SQL>
            </Command>
            <Confirm>
               Create function ${functionName}?
            </Confirm>
            <Result>
               Function ${functionName} created!
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Function">
         <Action id="sybase-function-drop" label="Drop Function" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Function" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop function ${DIB}${schema}${DIE}.${DIB}${objectname}${DIE}]]></SQL></Command>
            <Confirm>
               Really drop function ${schema}.${objectname}?
            </Confirm>
            <Result>
               Function ${schema}.${objectname} dropped!
            </Result>
         </Action>

         <Action id="sybase-ase-function-export" label="Export Function" icon="export"
                 class="functionExport"
                 doclink="../exportImport/exportImport.html#mozTocId584466"/>

         <Separator/>

         <ActionGroup label="Script Object to SQL Editor">
            <Action id="sybase-function-call" label="CALL" icon="execute"
                    class="sqlBuilder"
                    classargs="call,function"/>
         </ActionGroup>

         <ActionGroup label="Script Object to New SQL Editor">
            <Action id="sybase-function-call-new" label="CALL" icon="execute"
                    class="sqlBuilder"
                    classargs="call,function,newEditor"/>
         </ActionGroup>
       </ActionGroup>

      <!-- =================================================================== -->
      <!-- DBA actions -->
      <!-- =================================================================== -->

      <ActionGroup type="Logins">
         <Action id="sybase-logins-create" label="Create Login" reload="true" icon="add">
            <Input label="Login Name" name="userid" style="text"/>
            <Input label="Password" name="password" style="text"/>
            <Input label="Default Database" name="defaultDB" style="list">
               <Values>
                  <Command>
                    <SQL><![CDATA[select name from master.dbo.sysdatabases order by 1]]></SQL>                    
                  </Command>
               </Values>
               <Default>master</Default>
            </Input>

            <Command>
               <SQL><![CDATA[exec sp_addlogin ${userid}, ${password}, ${defaultDB}]]></SQL>
            </Command>
            <Result>
               User ${userid} created!
            </Result>
         </Action>
      </ActionGroup>
      
      <ActionGroup type="Login">
         <Action id="sybase-login-drop" label="Drop Login" reload="true" icon="remove">
            <Input label="User Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[exec sp_droplogin ${objectname} ]]></SQL></Command>
            <Confirm><![CDATA[
              Really drop user ${objectname}?
              ]]></Confirm>
            <Result>
               User ${objectname} dropped!
            </Result>
         </Action>

         <Action id="sybase-login-password" label="Change Password" >
            <Input label="User Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Caller Password" name="password" style="text"/>
            <Input label="New Password" name="newPassword" style="text"/>
            <Command><SQL><![CDATA[exec sp_password ${password}, ${newPassword}, ${objectname} ]]></SQL></Command>
            <Confirm><![CDATA[
              Really changed password for ${objectname}?
              ]]></Confirm>
            <Result>
               User ${objectname} dropped!
            </Result>
         </Action>

      </ActionGroup>

   </ObjectsActionDef>

   <!-- =================================================================== -->
   <!-- Definition of the database objects tree structure -->
   <!-- =================================================================== -->

   <ObjectsTreeDef id="sybase-ase">
      <GroupNode type="Databases" label="Databases">
         <DataNode type="Catalog" label="${getCatalogs.TABLE_CAT}" is-empty-output="continue">
            <SetVar name="catalog" value="${getCatalogs.TABLE_CAT}"/>
            <Command idref="getCatalogs">
               <Filter type="Catalog" name="Catalog">
                  <Column index="TABLE_CAT" name="Name"/>
               </Filter>
            </Command>

            <GroupNode type="Tables" label="Tables">
               <DataNode type="Table" label="${getTables.TABLE_SCHEM}.${getTables.TABLE_NAME}" sort="getTables.TABLE_SCHEM,getTables.TABLE_NAME">
                  <SetVar name="schema" value="${getTables.TABLE_SCHEM}"/>
                  <SetVar name="objectname" value="${getTables.TABLE_NAME}"/>
                  <SetVar name="rowcount" value="true"/>
                  <SetVar name="acceptInQB" value="true"/>
                  <Command idref="getTables">
                     <Input name="catalog" value="${catalog}"/>
                     <Input name="objectname" value="%"/>
                     <Input name="tableType" value="TABLE"/>
                     <Filter type="Table" name="Table">
                        <Column index="TABLE_NAME" name="Name"/>
                        <Column index="TABLE_SCHEM" name="Schema"/>
                     </Filter>
                  </Command>

                  <!-- Need to keep the objectname for the current table in
                       a new variable so that the viewers will be able to pick up
                       the correct input to display -->
                  <SetVar name="theTableName" value="${objectname}"/>

                  <GroupNode type="Columns" label="Columns">
                     <DataNode type="Column" label="${getColumns.COLUMN_NAME}   (${getColumns.TYPE_NAME})" isLeaf="true">
                        <SetVar name="objectname" value="${getColumns.COLUMN_NAME}"/>
                        <Command idref="getColumns">
                           <Input name="catalog" value="${catalog}"/>
                           <Input name="schema" value="${schema}"/>
                           <Input name="objectname" value="${theTableName}"/>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Indexes" label="Indexes">
                     <DataNode type="Index" label="${getIndexes.INDEX_NAME}   (${getIndexes.ORDINAL_POSITION}: ${getIndexes.COLUMN_NAME})" isLeaf="true">
                        <SetVar name="objectname" value="${getIndexes.INDEX_NAME}"/>
                        <Command idref="getIndexes">
                           <Input name="catalog" value="${catalog}"/>
                           <Input name="schema" value="${schema}"/>
                           <Input name="objectname" value="${theTableName}"/>
                           <Output modelaction="removeisnullrows" index="INDEX_NAME"/>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Triggers" label="Triggers">
                     <DataNode type="Trigger" label="${sybase-ase.getTriggers.name}  (${sybase-ase.getTriggers.owner}.${sybase-ase.getTriggers.table})  ${sybase-ase.getTriggers.type}" isLeaf="true">
                        <SetVar name="schema" value="${sybase-ase.getTriggers.owner}"/>
                        <SetVar name="objectname" value="${sybase-ase.getTriggers.name}"/>
                        <Command idref="sybase-ase.getTriggers">
                           <Input name="database" value="${catalog}"/>
                           <Input name="tableNamePattern" value="${theTableName}"/>
                        </Command>
                     </DataNode>
                  </GroupNode>
               </DataNode>
            </GroupNode>

            <GroupNode type="SystemTables" label="System Tables">
               <DataNode type="SystemTable" label="${getTables.TABLE_SCHEM}.${getTables.TABLE_NAME}" sort="getTables.TABLE_SCHEM,getTables.TABLE_NAME" isLeaf="true">
                  <SetVar name="schema" value="${getTables.TABLE_SCHEM}"/>
                  <SetVar name="objectname" value="${getTables.TABLE_NAME}"/>
                  <SetVar name="rowcount" value="true"/>
                  <SetVar name="acceptInQB" value="true"/>
                  <Command idref="getTables">
                     <Input name="catalog" value="${catalog}"/>
                     <Input name="objectname" value="%"/>
                     <Input name="tableType" value="SYSTEM TABLE"/>
                     <Filter type="SystemTable" name="System Table">
                        <Column index="TABLE_NAME" name="Name"/>
                        <Column index="TABLE_SCHEM" name="Schema"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Views" label="Views">
               <DataNode type="View" label="${getTables.TABLE_SCHEM}.${getTables.TABLE_NAME}" sort="getTables.TABLE_SCHEM,getTables.TABLE_NAME" isLeaf="true">
                  <SetVar name="schema" value="${getTables.TABLE_SCHEM}"/>
                  <SetVar name="objectname" value="${getTables.TABLE_NAME}"/>
                  <SetVar name="rowcount" value="true"/>
                  <SetVar name="acceptInQB" value="true"/>
                  <Command idref="getTables">
                     <Input name="catalog" value="${catalog}"/>
                     <Input name="objectname" value="%"/>
                     <Input name="tableType" value="VIEW"/>
                     <Filter type="View" name="View">
                        <Column index="TABLE_NAME" name="Name"/>
                        <Column index="TABLE_SCHEM" name="Schema"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Indexes" label="Indexes">
               <DataNode type="Index" label="${sybase-ase.getIndexes.INDEX_NAME}   (${sybase-ase.getIndexes.TABLE_NAME})" isLeaf="true">
                  <SetVar name="tableId" value="${sybase-ase.getIndexes.TABLE_ID}"/>
                  <SetVar name="indexId" value="${sybase-ase.getIndexes.INDEX_ID}"/>
                  <If test="#dm.getDatabaseMajorVersion() gte 12">
                     <SetVar name="orderSQL1" value="index_colorder(object_name(${tableId}), ${indexId}, 1)"/>
                     <SetVar name="orderSQL2" value="index_colorder(object_name(${tableId}), ${indexId}, 2)"/>
                     <SetVar name="orderSQL3" value="index_colorder(object_name(${tableId}), ${indexId}, 3)"/>
                     <SetVar name="orderSQL4" value="index_colorder(object_name(${tableId}), ${indexId}, 4)"/>
                     <SetVar name="orderSQL5" value="index_colorder(object_name(${tableId}), ${indexId}, 5)"/>
                     <SetVar name="orderSQL6" value="index_colorder(object_name(${tableId}), ${indexId}, 6)"/>
                     <SetVar name="orderSQL7" value="index_colorder(object_name(${tableId}), ${indexId}, 7)"/>
                     <SetVar name="orderSQL8" value="index_colorder(object_name(${tableId}), ${indexId}, 8)"/>
                     <SetVar name="orderSQL9" value="index_colorder(object_name(${tableId}), ${indexId}, 9)"/>
                     <SetVar name="orderSQL10" value="index_colorder(object_name(${tableId}), ${indexId}, 10)"/>
                     <SetVar name="orderSQL11" value="index_colorder(object_name(${tableId}), ${indexId}, 11)"/>
                     <SetVar name="orderSQL12" value="index_colorder(object_name(${tableId}), ${indexId}, 12)"/>
                     <SetVar name="orderSQL13" value="index_colorder(object_name(${tableId}), ${indexId}, 13)"/>
                     <SetVar name="orderSQL14" value="index_colorder(object_name(${tableId}), ${indexId}, 14)"/>
                     <SetVar name="orderSQL15" value="index_colorder(object_name(${tableId}), ${indexId}, 15)"/>
                     <SetVar name="orderSQL16" value="index_colorder(object_name(${tableId}), ${indexId}, 16)"/>
                  </If>
                  <Else>
                     <SetVar name="orderSQL1" value="'ASC'"/>
                     <SetVar name="orderSQL2" value="'ASC'"/>
                     <SetVar name="orderSQL3" value="'ASC'"/>
                     <SetVar name="orderSQL4" value="'ASC'"/>
                     <SetVar name="orderSQL5" value="'ASC'"/>
                     <SetVar name="orderSQL6" value="'ASC'"/>
                     <SetVar name="orderSQL7" value="'ASC'"/>
                     <SetVar name="orderSQL8" value="'ASC'"/>
                     <SetVar name="orderSQL9" value="'ASC'"/>
                     <SetVar name="orderSQL10" value="'ASC'"/>
                     <SetVar name="orderSQL11" value="'ASC'"/>
                     <SetVar name="orderSQL12" value="'ASC'"/>
                     <SetVar name="orderSQL13" value="'ASC'"/>
                     <SetVar name="orderSQL14" value="'ASC'"/>
                     <SetVar name="orderSQL15" value="'ASC'"/>
                     <SetVar name="orderSQL16" value="'ASC'"/>
                  </Else>
                  <Command idref="sybase-ase.getIndexes">
                     <Input name="database" value="${catalog}"/>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Users" label="Users" isLeaf="false">
               <DataNode type="User" label="${sybase-ase.getUsers.User_name}" isLeaf="true">
                  <SetVar name="objectname" value="${sybase-ase.getUsers.User_name}"/>
                  <Command idref="sybase-ase.getUsers">
                     <Input name="database" value="${catalog}"/>
                     <Output id="sybase-ase.getUsers.User_name" index="1"/>
                     <Filter type="User" name="User">
                        <Column index="User Name" name="Name"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Groups" label="Groups">
               <DataNode type="Group" label="${sybase-ase.getGroups.Group_name}" isLeaf="true">
                  <SetVar name="objectname" value="${sybase-ase.getGroups.Group_name}"/>
                  <Command idref="sybase-ase.getGroups">
                     <Input name="database" value="${catalog}"/>
                     <Output id="sybase-ase.getGroups.Group_name" index="1"/>
                     <Filter type="Group" name="Group">
                        <Column index="Group Name" name="Name"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Types" label="User Defined Data Types" isLeaf="true"/>

            <SetVar name="theTableName" value="%"/>
            <GroupNode type="Triggers" label="Triggers">
               <DataNode type="Trigger" label="${sybase-ase.getTriggers.name}  (${sybase-ase.getTriggers.owner}.${sybase-ase.getTriggers.table})  ${sybase-ase.getTriggers.type}" isLeaf="true">
                  <SetVar name="schema" value="${sybase-ase.getTriggers.owner}"/>
                  <SetVar name="objectname" value="${sybase-ase.getTriggers.name}"/>
                  <Command idref="sybase-ase.getTriggers">
                     <Input name="database" value="${catalog}"/>
                     <Input name="tableNamePattern" value="${theTableName}"/>
                     <Filter type="Trigger" name="Trigger">
                        <Column index="name" name="Name"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Procedures" label="Stored Procedures">
               <DataNode type="Procedure" label="${sybase-ase.getObjects.owner}.${sybase-ase.getObjects.name}" isLeaf="true">
                  <SetVar name="schema" value="${sybase-ase.getObjects.owner}"/>
                  <SetVar name="objectname" value="${sybase-ase.getObjects.name}"/>
                  <Command idref="sybase-ase.getObjects">
                     <Input name="database" value="${catalog}"/>
                     <Input name="type" value="P"/>
                     <Filter type="Procedure" name="Procedure">
                        <Column index="name" name="Name"/>
                        <Column index="owner" name="Schema"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Functions" label="Functions">
               <DataNode type="Function" label="${sybase-ase.getObjects.owner}.${sybase-ase.getObjects.name}" isLeaf="true">
                  <SetVar name="schema" value="${sybase-ase.getObjects.owner}"/>
                  <SetVar name="objectname" value="${sybase-ase.getObjects.name}"/>
                  <Command idref="sybase-ase.getObjects">
                     <Input name="database" value="${catalog}"/>
                     <Input name="type" value="SF"/>
                     <Filter type="Function" name="Function">
                        <Column index="name" name="Name"/>
                        <Column index="owner" name="Schema"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

         </DataNode>
      </GroupNode>

      <!-- ================================================================= -->
      <!-- DBA Nodes -->
      <!-- ================================================================= -->

      <GroupNode type="DBA" label="DBA Views">
         <GroupNode type="ServerInfo" label="Server Info" isLeaf="true"/>

         <GroupNode type="Logins" label="Logins">
            <DataNode type="Login" label="${sybase-ase.getLogins.Name}" isLeaf="true">
               <SetVar name="objectname" value="${sybase-ase.getLogins.Name}"/>
               <Command idref="sybase-ase.getLogins">
                  <Output id="sybase-ase.getLogins.Name" index="1"/>
                  <Output id="sybase-ase.getLogins.suid" index="2"/>
               </Command>
            </DataNode>
         </GroupNode>

         <GroupNode type="Devices" label="Database Devices">
            <DataNode type="Device" label="${sybase-ase.getDevices.Name}" isLeaf="true">
               <SetVar name="objectname" value="${sybase-ase.getDevices.Name}"/>
               <Command idref="sybase-ase.getDevices">
                  <Output id="sybase-ase.getDevices.Name" index="1"/>
               </Command>
            </DataNode>
         </GroupNode>

         <GroupNode type="RemoteServers" label="Remote Servers" isLeaf="true"/>

         <GroupNode type="Processes" label="Processes" isLeaf="true"/>

         <GroupNode type="ServerRoles" label="Roles">
            <DataNode type="ServerRole" label="${sybase-ase.getServerRoles.NAME}" isLeaf="true">
               <SetVar name="objectname" value="${sybase-ase.getServerRoles.NAME}"/>
               <Command idref="sybase-ase.getServerRoles">
                  <Output id="sybase-ase.getServerRoles.NAME" index="2"/>
               </Command>
            </DataNode>
         </GroupNode>

         <GroupNode type="Transactions" label="Transactions" isLeaf="true"/>

         <GroupNode type="Locks" label="Locks" isLeaf="true"/>

      </GroupNode>

   </ObjectsTreeDef>

   <!-- =================================================================== -->
   <!-- Definition of the database objects views -->
   <!-- =================================================================== -->

   <!-- Include the generic-view -->
   &generic-view;

   <ObjectsViewDef id="sybase-ase" extends="generic">
      <ObjectView type="Catalog">
         <!-- Drop all views since these are available for type="Tables" -->
         <DataView type="Tables" action="drop"/>
         <DataView type="References" action="drop"/>
      </ObjectView>

      <ObjectView type="Tables">
         <DataView type="Tables" label="Tables" viewer="grid">
            <Input name="menuItem" value="Script: SELECT ALL">
               <Input name="command" value="select * from ${schema=TABLE_SCHEM}${object=TABLE_NAME}"/>
            </Input>
            <Input name="menuItem" value="Script: DROP TABLE">
               <Input name="command" value="drop table ${schema=TABLE_SCHEM}${object=TABLE_NAME}"/>
            </Input>

            <Command idref="getTables">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="%"/>
               <Input name="tableType" value="TABLE"/>
            </Command>
         </DataView>
         <DataView type="References" label="References" viewer="tables-refs"
                 doclink="../databaseExplorer/databaseExplorer.html#mozTocId809328">
            <Command idref="getTables">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="%"/>
               <Input name="tableType" value="TABLE"/>
            </Command>
         </DataView>
      </ObjectView>

      <!-- Sub def of the Table type view -->
      <ObjectView type="Table">
         <DataView type="Source" label="DDL" viewer="ddl">
            <Input name="formatSQL" value="true"/>
         </DataView>

         <DataView type="Trigger" label="Triggers" viewer="form">
            <Command idref="sybase-ase.getTableTriggers">
               <Input name="database" value="${catalog}"/>
               <Input name="owner" value="${schema}"/>
               <Input name="name" value="${objectname}"/>
            </Command>
         </DataView>
         <!--<DataView type="Dependencies" label="Dependencies" viewer="grid">-->
            <!--<Command idref="sybase-ase.getDependencies">-->
               <!--<Input name="name" value="${objectname}"/>-->
            <!--</Command>-->
         <!--</DataView>-->
      </ObjectView>

      <ObjectView type="SystemTables">
         <DataView type="SystemTables" label="SystemTables" viewer="grid">
            <Input name="menuItem" value="Script: SELECT ALL">
               <Input name="command" value="select * from ${schema=TABLE_SCHEM}${object=TABLE_NAME}"/>
            </Input>

            <Command idref="getTables">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="%"/>
               <Input name="tableType" value="SYSTEM TABLE"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="SystemTable">
         <DataView type="Info" label="Info" viewer="node-form"/>
         <DataView type="Columns" label="Columns" viewer="grid">
            <Command idref="getColumns">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="%"/>
            </Command>
         </DataView>
         <DataView type="Data" label="Data" viewer="table-data">
            <Message>
               <![CDATA[
<html>
Note: This is a system table. Do not edit unless you are really sure what you're
doing!
</html>
               ]]>
            </Message>
         </DataView>
         <DataView type="RowCount" label="Row Count" viewer="table-rowcount"/>
      </ObjectView>

      <ObjectView type="Views">
         <DataView type="Views" label="Views" viewer="grid">
            <Input name="menuItem" value="Script: SELECT ALL">
               <Input name="command" value="select * from ${schema=TABLE_SCHEM}${object=TABLE_NAME}"/>
            </Input>
            <Input name="menuItem" value="Script: DROP VIEW">
               <Input name="command" value="drop view ${schema=TABLE_SCHEM}${object=TABLE_NAME}"/>
            </Input>

            <Command idref="getTables">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="%"/>
               <Input name="tableType" value="VIEW"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="View">
         <DataView type="Info" label="Info" viewer="node-form"/>
         <DataView type="Columns" label="Columns" viewer="grid">
            <Command idref="getColumns">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${objectname}"/>
            </Command>
         </DataView>
         <DataView type="Data" label="Data" viewer="table-data"/>
         <DataView type="RowCount" label="Row Count" viewer="table-rowcount"/>
         <DataView type="Index" label="Indexes" viewer="grid">
            <Command idref="getIndexes">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${objectname}"/>
            </Command>

         </DataView>
         <DataView type="Source" label="DDL" viewer="ddl">
            <Input name="objectType" value="createView"/>
            <Input name="formatSQL" value="true"/>
         </DataView>

         <!--<DataView type="Source" label="Source" viewer="text">-->
            <!--<Input name="formatSQL" value="true"/>-->
<!---->
            <!--<Command idref="sybase-ase.getObjectSource">-->
               <!--<Input name="database" value="${catalog}"/>-->
               <!--<Input name="owner" value="${schema}"/>-->
               <!--<Input name="name" value="${objectname}"/>-->
            <!--</Command>-->
         <!--</DataView>-->
         <!--<DataView type="Dependencies" label="Dependencies" viewer="grid">-->
            <!--<Command idref="sybase-ase.getDependencies">-->
               <!--<Input name="name" value="${objectname}"/>-->
            <!--</Command>-->
         <!--</DataView>-->
      </ObjectView>

      <ObjectView type="Users">
         <DataView type="Users" label="Users" viewer="grid">
            <Command idref="sybase-ase.getUsers">
               <Input name="database" value="${catalog}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="User">
         <DataView type="Info" label="Info" viewer="node-form"/>
      </ObjectView>

      <ObjectView type="Groups">
         <DataView type="Groups" label="Groups" viewer="grid">
            <Command idref="sybase-ase.getGroups">
               <Input name="database" value="${catalog}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Group">
         <DataView type="Info" label="Info" viewer="node-form"/>
         <DataView type="Users" label="Users" viewer="grid">
            <Command idref="sybase-ase.getGroupUsers">
               <Input name="database" value="${catalog}"/>
               <Input name="group" value="${objectname}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Triggers">
         <DataView type="Triggers" label="Triggers" viewer="grid">
            <Command idref="sybase-ase.getTriggers">
               <Input name="database" value="${catalog}"/>
               <Input name="tableNamePattern" value="${theTableName}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Trigger">
         <DataView type="SourceEditor" label="Trigger Editor"
                   viewer="ProcedureViewer"
                   classargs="TRIGGER"
                   doclink="../procEditor/procEditor.html"/>
         <DataView type="Info" label="Info" viewer="node-form"/>
<!--         
         <DataView type="Source" label="Source" viewer="text">
            <Input name="formatSQL" value="true"/>

            <Command idref="sybase-ase.getObjectSource">
               <Input name="database" value="${catalog}"/>
               <Input name="owner" value="${sybase-ase.getTriggers.owner}"/>
               <Input name="name" value="${objectname}"/>
            </Command>
         </DataView>
-->
<!--
         <DataView type="Dependencies" label="Dependencies" viewer="grid">
            <Command idref="sybase-ase.getDependencies">
               <Input name="name" value="${objectname}"/>
            </Command>
         </DataView>
-->         
      </ObjectView>

      <ObjectView type="Index">
         <DataView type="Columns" label="Columns" viewer="form">
            <Command idref="sybase-ase.getIndexColumns">
               <Input name="database" value="${catalog}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Types">
         <DataView type="Types" label="User Defined Data Types" viewer="grid">
            <Command idref="sybase-ase.getUserTypes">
               <Input name="database" value="${catalog}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Procedures">
         <DataView type="Procedures" label="Procedures" viewer="grid">
            <Command idref="sybase-ase.getObjects">
               <Input name="database" value="${catalog}"/>
               <Input name="type" value="P"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Procedure">
         <DataView type="Columns" action="drop"/>
         <DataView type="SourceEditor" label="Procedure Editor"
                   viewer="ProcedureViewer"
                   classargs="PROCEDURE"
                   doclink="../procEditor/procEditor.html"/>
         <DataView type="Interface" label="Interface" viewer="form">
            <Command idref="getProcedureColumns">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${sybase-ase.getObjects.owner}"/>
               <Input name="objectname" value="${objectname}"/>
            </Command>
         </DataView>
<!--         
         <DataView type="Source" label="Source" viewer="text">
            <Command idref="sybase-ase.getObjectSource">
               <Input name="database" value="${catalog}"/>
               <Input name="owner" value="${sybase-ase.getObjects.owner}"/>
               <Input name="name" value="${objectname}"/>
            </Command>
         </DataView>
-->         
<!--
         <DataView type="Dependencies" label="Dependencies" viewer="grid">
            <Command idref="sybase-ase.getDependencies">
              <Input name="name" value="${objectname}"/>
            </Command>
         </DataView>
-->         
      </ObjectView>

      <ObjectView type="Functions">
         <DataView type="Functions" label="Functions" viewer="grid">
            <Command idref="sybase-ase.getObjects">
               <Input name="database" value="${catalog}"/>
               <Input name="type" value="SF"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Function">
         <DataView type="Columns" action="drop"/>
         <DataView type="SourceEditor" label="Function Editor"
                   viewer="ProcedureViewer"
                   classargs="FUNCTION"
                   doclink="../procEditor/procEditor.html"/>
         <DataView type="Interface" label="Interface" viewer="form">
            <Command idref="sybase-ase.getFunctionColumns">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${sybase-ase.getObjects.owner}"/>
               <Input name="function" value="${objectname}"/>
               <Input name="qname" value="${sybase-ase.getObjects.owner}.${objectname}"/>
            </Command>
         </DataView>
      </ObjectView>

      <!-- ================================================================= -->
      <!-- DBA Views -->
      <!-- ================================================================= -->

      <ObjectView type="ServerInfo">
         <DataView type="Info" label="Server Info" viewer="grid">
            <Command idref="sybase-ase.serverInfo"/>
         </DataView>
         <DataView type="Info" label="Character Set" viewer="grid">
            <Command idref="sybase-ase.getCharSet"/>
         </DataView>
      </ObjectView>


      <ObjectView type="Logins">
         <DataView type="Logins" label="Logins" viewer="grid">
            <Command idref="sybase-ase.getLogins"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Login">
         <DataView type="Info" label="Info" viewer="node-form"/>
         <DataView type="Databases" label="Databases" viewer="grid">
            <Command idref="sybase-ase.getLoginDatabases">
               <Input name="suid" value="${sybase-ase.getLogins.suid}"/>
            </Command>
         </DataView>
         <DataView type="Roles" label="Roles" viewer="grid">
            <Command idref="sybase-ase.getLoginRoles">
               <Input name="login" value="${sybase-ase.getLogins.Name}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Devices">
         <DataView type="Devices" label="Database Devices" viewer="grid">
            <Command idref="sybase-ase.getDevices"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Device">
         <DataView type="Info" label="Info" viewer="node-form"/>
         <DataView type="Databases" label="Databases" viewer="grid">
            <Command idref="sybase-ase.getDeviceDatabases">
               <Input name="name" value="${objectname}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="RemoteServers">
         <DataView type="RemoteServers" label="Remote Servers" viewer="grid">
            <Command idref="sybase-ase.getRemoteServers"/>
         </DataView>
      </ObjectView>

      <ObjectView type="ServerRoles">
         <DataView type="ServerRoles" label="Roles" viewer="grid">
            <Command idref="sybase-ase.getServerRoles"/>
         </DataView>
      </ObjectView>

      <ObjectView type="ServerRole">
         <DataView type="Info" label="Info" viewer="node-form"/>
         <DataView type="Logins" label="Logins" viewer="grid">
            <Command idref="sybase-ase.getRoleLogins">
               <Input name="name" value="${objectname}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Processes">
         <DataView type="Processes" label="Processes" viewer="grid">
            <Command idref="sybase-ase.getProcesses"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Transactions">
         <DataView type="Transactions" label="Transactions" viewer="grid">
            <Command idref="sybase-ase.getTransactions"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Locks">
         <DataView type="Locks" label="Locks" viewer="grid">
            <Command idref="sybase-ase.getLocks"/>
         </DataView>
      </ObjectView>

   </ObjectsViewDef>

</DatabaseProfile>
